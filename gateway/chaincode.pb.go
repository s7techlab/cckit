// Gateway to network/chaincode
// Two types of gateways: 1. Gateway to all chaincodes in Network 2. Gateway to some concrete chaincode instance in some channel

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.7.1
// source: chaincode.proto

package gateway

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	peer "github.com/hyperledger/fabric-protos-go/peer"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Chaincode invocation type
type InvocationType int32

const (
	// Simulation
	InvocationType_QUERY InvocationType = 0
	// Simulation and applying to ledger
	InvocationType_INVOKE InvocationType = 1
)

// Enum value maps for InvocationType.
var (
	InvocationType_name = map[int32]string{
		0: "QUERY",
		1: "INVOKE",
	}
	InvocationType_value = map[string]int32{
		"QUERY":  0,
		"INVOKE": 1,
	}
)

func (x InvocationType) Enum() *InvocationType {
	p := new(InvocationType)
	*p = x
	return p
}

func (x InvocationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InvocationType) Descriptor() protoreflect.EnumDescriptor {
	return file_chaincode_proto_enumTypes[0].Descriptor()
}

func (InvocationType) Type() protoreflect.EnumType {
	return &file_chaincode_proto_enumTypes[0]
}

func (x InvocationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InvocationType.Descriptor instead.
func (InvocationType) EnumDescriptor() ([]byte, []int) {
	return file_chaincode_proto_rawDescGZIP(), []int{0}
}

// Chaincode locator - channel name and chaincode name
type ChaincodeLocator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Chaincode name
	Chaincode string `protobuf:"bytes,1,opt,name=chaincode,proto3" json:"chaincode,omitempty"`
	// Channel name
	Channel string `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *ChaincodeLocator) Reset() {
	*x = ChaincodeLocator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaincodeLocator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaincodeLocator) ProtoMessage() {}

func (x *ChaincodeLocator) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaincodeLocator.ProtoReflect.Descriptor instead.
func (*ChaincodeLocator) Descriptor() ([]byte, []int) {
	return file_chaincode_proto_rawDescGZIP(), []int{0}
}

func (x *ChaincodeLocator) GetChaincode() string {
	if x != nil {
		return x.Chaincode
	}
	return ""
}

func (x *ChaincodeLocator) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

// Chaincode invocation input
type ChaincodeInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chaincode *ChaincodeLocator `protobuf:"bytes,1,opt,name=chaincode,proto3" json:"chaincode,omitempty"`
	// Input contains the arguments for invocation.
	Args [][]byte `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	// TransientMap contains data (e.g. cryptographic material) that might be used
	// to implement some form of application-level confidentiality. The contents
	// of this field are supposed to always be omitted from the transaction and
	// excluded from the ledger.
	Transient map[string][]byte `protobuf:"bytes,3,rep,name=transient,proto3" json:"transient,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ChaincodeInput) Reset() {
	*x = ChaincodeInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaincodeInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaincodeInput) ProtoMessage() {}

func (x *ChaincodeInput) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaincodeInput.ProtoReflect.Descriptor instead.
func (*ChaincodeInput) Descriptor() ([]byte, []int) {
	return file_chaincode_proto_rawDescGZIP(), []int{1}
}

func (x *ChaincodeInput) GetChaincode() *ChaincodeLocator {
	if x != nil {
		return x.Chaincode
	}
	return nil
}

func (x *ChaincodeInput) GetArgs() [][]byte {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *ChaincodeInput) GetTransient() map[string][]byte {
	if x != nil {
		return x.Transient
	}
	return nil
}

// Chaincode execution specification
type ChaincodeExec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  InvocationType  `protobuf:"varint,1,opt,name=type,proto3,enum=cckit.gateway.InvocationType" json:"type,omitempty"`
	Input *ChaincodeInput `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *ChaincodeExec) Reset() {
	*x = ChaincodeExec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaincodeExec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaincodeExec) ProtoMessage() {}

func (x *ChaincodeExec) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaincodeExec.ProtoReflect.Descriptor instead.
func (*ChaincodeExec) Descriptor() ([]byte, []int) {
	return file_chaincode_proto_rawDescGZIP(), []int{2}
}

func (x *ChaincodeExec) GetType() InvocationType {
	if x != nil {
		return x.Type
	}
	return InvocationType_QUERY
}

func (x *ChaincodeExec) GetInput() *ChaincodeInput {
	if x != nil {
		return x.Input
	}
	return nil
}

// Block range for event subscription.
// Values can be negative. If from is negative - subscription starts from x block from channel height
type BlockRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// from block
	From int64 `protobuf:"varint,3,opt,name=from,proto3" json:"from,omitempty"`
	// to block
	To int64 `protobuf:"varint,4,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *BlockRange) Reset() {
	*x = BlockRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockRange) ProtoMessage() {}

func (x *BlockRange) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockRange.ProtoReflect.Descriptor instead.
func (*BlockRange) Descriptor() ([]byte, []int) {
	return file_chaincode_proto_rawDescGZIP(), []int{3}
}

func (x *BlockRange) GetFrom() int64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *BlockRange) GetTo() int64 {
	if x != nil {
		return x.To
	}
	return 0
}

// Chaincode events request
type ChaincodeEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chaincode *ChaincodeLocator `protobuf:"bytes,1,opt,name=chaincode,proto3" json:"chaincode,omitempty"`
	Block     *BlockRange       `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *ChaincodeEventsRequest) Reset() {
	*x = ChaincodeEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaincodeEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaincodeEventsRequest) ProtoMessage() {}

func (x *ChaincodeEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaincodeEventsRequest.ProtoReflect.Descriptor instead.
func (*ChaincodeEventsRequest) Descriptor() ([]byte, []int) {
	return file_chaincode_proto_rawDescGZIP(), []int{4}
}

func (x *ChaincodeEventsRequest) GetChaincode() *ChaincodeLocator {
	if x != nil {
		return x.Chaincode
	}
	return nil
}

func (x *ChaincodeEventsRequest) GetBlock() *BlockRange {
	if x != nil {
		return x.Block
	}
	return nil
}

// Chaincode instance chaincode input spec
type ChaincodeInstanceInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input contains the arguments for invocation.
	Args [][]byte `protobuf:"bytes,1,rep,name=args,proto3" json:"args,omitempty"`
	// TransientMap contains data (e.g. cryptographic material) that might be used
	// to implement some form of application-level confidentiality. The contents
	// of this field are supposed to always be omitted from the transaction and
	// excluded from the ledger.
	Transient map[string][]byte `protobuf:"bytes,2,rep,name=transient,proto3" json:"transient,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ChaincodeInstanceInput) Reset() {
	*x = ChaincodeInstanceInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaincodeInstanceInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaincodeInstanceInput) ProtoMessage() {}

func (x *ChaincodeInstanceInput) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaincodeInstanceInput.ProtoReflect.Descriptor instead.
func (*ChaincodeInstanceInput) Descriptor() ([]byte, []int) {
	return file_chaincode_proto_rawDescGZIP(), []int{5}
}

func (x *ChaincodeInstanceInput) GetArgs() [][]byte {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *ChaincodeInstanceInput) GetTransient() map[string][]byte {
	if x != nil {
		return x.Transient
	}
	return nil
}

type ChaincodeInstanceExec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  InvocationType          `protobuf:"varint,1,opt,name=type,proto3,enum=cckit.gateway.InvocationType" json:"type,omitempty"`
	Input *ChaincodeInstanceInput `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *ChaincodeInstanceExec) Reset() {
	*x = ChaincodeInstanceExec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaincodeInstanceExec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaincodeInstanceExec) ProtoMessage() {}

func (x *ChaincodeInstanceExec) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaincodeInstanceExec.ProtoReflect.Descriptor instead.
func (*ChaincodeInstanceExec) Descriptor() ([]byte, []int) {
	return file_chaincode_proto_rawDescGZIP(), []int{6}
}

func (x *ChaincodeInstanceExec) GetType() InvocationType {
	if x != nil {
		return x.Type
	}
	return InvocationType_QUERY
}

func (x *ChaincodeInstanceExec) GetInput() *ChaincodeInstanceInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type ChaincodeInstanceEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block *BlockRange `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *ChaincodeInstanceEventsRequest) Reset() {
	*x = ChaincodeInstanceEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaincodeInstanceEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaincodeInstanceEventsRequest) ProtoMessage() {}

func (x *ChaincodeInstanceEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaincodeInstanceEventsRequest.ProtoReflect.Descriptor instead.
func (*ChaincodeInstanceEventsRequest) Descriptor() ([]byte, []int) {
	return file_chaincode_proto_rawDescGZIP(), []int{7}
}

func (x *ChaincodeInstanceEventsRequest) GetBlock() *BlockRange {
	if x != nil {
		return x.Block
	}
	return nil
}

var File_chaincode_proto protoreflect.FileDescriptor

var file_chaincode_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0d, 0x63, 0x63, 0x6b, 0x69, 0x74, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x70, 0x65, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x70, 0x65,
	0x65, 0x72, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4a, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xed, 0x01, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x63, 0x6b,
	0x69, 0x74, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x4a, 0x0a, 0x09, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x63, 0x63, 0x6b, 0x69, 0x74, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0x3c, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x77, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x45, 0x78, 0x65, 0x63, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x63, 0x63, 0x6b, 0x69, 0x74, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x63, 0x6b, 0x69, 0x74, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x30, 0x0a,
	0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x6f, 0x22,
	0x88, 0x01, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x63, 0x6b, 0x69, 0x74, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x63, 0x6b, 0x69, 0x74,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0xbe, 0x01, 0x0a, 0x16, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x52, 0x0a, 0x09, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63,
	0x63, 0x6b, 0x69, 0x74, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0x3c, 0x0a,
	0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x87, 0x01, 0x0a, 0x15,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x45, 0x78, 0x65, 0x63, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x63, 0x63, 0x6b, 0x69, 0x74, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x63, 0x6b, 0x69, 0x74, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x51, 0x0a, 0x1e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x63, 0x6b, 0x69, 0x74, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2a, 0x27, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4e, 0x56, 0x4f, 0x4b, 0x45, 0x10,
	0x01, 0x32, 0xf9, 0x02, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x04, 0x45, 0x78, 0x65, 0x63, 0x12, 0x1c,
	0x2e, 0x63, 0x63, 0x6b, 0x69, 0x74, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x65, 0x63, 0x1a, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x3a, 0x01, 0x2a, 0x12, 0x52, 0x0a, 0x05, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x1d, 0x2e, 0x63, 0x63, 0x6b, 0x69, 0x74, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x57,
	0x0a, 0x06, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x12, 0x1d, 0x2e, 0x63, 0x63, 0x6b, 0x69, 0x74,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x16, 0x22, 0x11, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x69, 0x6e,
	0x76, 0x6f, 0x6b, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x64, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x25, 0x2e, 0x63, 0x63, 0x6b, 0x69, 0x74, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x30, 0x01, 0x32, 0x7e, 0x0a,
	0x16, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x25, 0x2e, 0x63, 0x63, 0x6b, 0x69, 0x74, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x30, 0x01, 0x32, 0xc5, 0x03,
	0x0a, 0x18, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x04, 0x45, 0x78,
	0x65, 0x63, 0x12, 0x24, 0x2e, 0x63, 0x63, 0x6b, 0x69, 0x74, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x45, 0x78, 0x65, 0x63, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1d, 0x22, 0x18, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x3a, 0x01, 0x2a, 0x12,
	0x63, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x25, 0x2e, 0x63, 0x63, 0x6b, 0x69, 0x74,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a,
	0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x68, 0x0a, 0x06, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x12, 0x25,
	0x2e, 0x63, 0x63, 0x6b, 0x69, 0x74, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22,
	0x1a, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x75,
	0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2d, 0x2e, 0x63, 0x63, 0x6b, 0x69, 0x74,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22,
	0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x30, 0x01, 0x32, 0x97, 0x01, 0x0a, 0x1e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x75, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x2d, 0x2e, 0x63, 0x63, 0x6b, 0x69, 0x74, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1c, 0x12, 0x1a, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x30, 0x01, 0x42,
	0x24, 0x5a, 0x22, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x37,
	0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2f, 0x63, 0x63, 0x6b, 0x69, 0x74, 0x2f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chaincode_proto_rawDescOnce sync.Once
	file_chaincode_proto_rawDescData = file_chaincode_proto_rawDesc
)

func file_chaincode_proto_rawDescGZIP() []byte {
	file_chaincode_proto_rawDescOnce.Do(func() {
		file_chaincode_proto_rawDescData = protoimpl.X.CompressGZIP(file_chaincode_proto_rawDescData)
	})
	return file_chaincode_proto_rawDescData
}

var file_chaincode_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_chaincode_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_chaincode_proto_goTypes = []interface{}{
	(InvocationType)(0),                    // 0: cckit.gateway.InvocationType
	(*ChaincodeLocator)(nil),               // 1: cckit.gateway.ChaincodeLocator
	(*ChaincodeInput)(nil),                 // 2: cckit.gateway.ChaincodeInput
	(*ChaincodeExec)(nil),                  // 3: cckit.gateway.ChaincodeExec
	(*BlockRange)(nil),                     // 4: cckit.gateway.BlockRange
	(*ChaincodeEventsRequest)(nil),         // 5: cckit.gateway.ChaincodeEventsRequest
	(*ChaincodeInstanceInput)(nil),         // 6: cckit.gateway.ChaincodeInstanceInput
	(*ChaincodeInstanceExec)(nil),          // 7: cckit.gateway.ChaincodeInstanceExec
	(*ChaincodeInstanceEventsRequest)(nil), // 8: cckit.gateway.ChaincodeInstanceEventsRequest
	nil,                                    // 9: cckit.gateway.ChaincodeInput.TransientEntry
	nil,                                    // 10: cckit.gateway.ChaincodeInstanceInput.TransientEntry
	(*peer.Response)(nil),                  // 11: protos.Response
	(*peer.ChaincodeEvent)(nil),            // 12: protos.ChaincodeEvent
}
var file_chaincode_proto_depIdxs = []int32{
	1,  // 0: cckit.gateway.ChaincodeInput.chaincode:type_name -> cckit.gateway.ChaincodeLocator
	9,  // 1: cckit.gateway.ChaincodeInput.transient:type_name -> cckit.gateway.ChaincodeInput.TransientEntry
	0,  // 2: cckit.gateway.ChaincodeExec.type:type_name -> cckit.gateway.InvocationType
	2,  // 3: cckit.gateway.ChaincodeExec.input:type_name -> cckit.gateway.ChaincodeInput
	1,  // 4: cckit.gateway.ChaincodeEventsRequest.chaincode:type_name -> cckit.gateway.ChaincodeLocator
	4,  // 5: cckit.gateway.ChaincodeEventsRequest.block:type_name -> cckit.gateway.BlockRange
	10, // 6: cckit.gateway.ChaincodeInstanceInput.transient:type_name -> cckit.gateway.ChaincodeInstanceInput.TransientEntry
	0,  // 7: cckit.gateway.ChaincodeInstanceExec.type:type_name -> cckit.gateway.InvocationType
	6,  // 8: cckit.gateway.ChaincodeInstanceExec.input:type_name -> cckit.gateway.ChaincodeInstanceInput
	4,  // 9: cckit.gateway.ChaincodeInstanceEventsRequest.block:type_name -> cckit.gateway.BlockRange
	3,  // 10: cckit.gateway.ChaincodeService.Exec:input_type -> cckit.gateway.ChaincodeExec
	2,  // 11: cckit.gateway.ChaincodeService.Query:input_type -> cckit.gateway.ChaincodeInput
	2,  // 12: cckit.gateway.ChaincodeService.Invoke:input_type -> cckit.gateway.ChaincodeInput
	5,  // 13: cckit.gateway.ChaincodeService.Events:input_type -> cckit.gateway.ChaincodeEventsRequest
	5,  // 14: cckit.gateway.ChaincodeEventsService.Events:input_type -> cckit.gateway.ChaincodeEventsRequest
	7,  // 15: cckit.gateway.ChaincodeInstanceService.Exec:input_type -> cckit.gateway.ChaincodeInstanceExec
	6,  // 16: cckit.gateway.ChaincodeInstanceService.Query:input_type -> cckit.gateway.ChaincodeInstanceInput
	6,  // 17: cckit.gateway.ChaincodeInstanceService.Invoke:input_type -> cckit.gateway.ChaincodeInstanceInput
	8,  // 18: cckit.gateway.ChaincodeInstanceService.Events:input_type -> cckit.gateway.ChaincodeInstanceEventsRequest
	8,  // 19: cckit.gateway.ChaincodeInstanceEventsService.Events:input_type -> cckit.gateway.ChaincodeInstanceEventsRequest
	11, // 20: cckit.gateway.ChaincodeService.Exec:output_type -> protos.Response
	11, // 21: cckit.gateway.ChaincodeService.Query:output_type -> protos.Response
	11, // 22: cckit.gateway.ChaincodeService.Invoke:output_type -> protos.Response
	12, // 23: cckit.gateway.ChaincodeService.Events:output_type -> protos.ChaincodeEvent
	12, // 24: cckit.gateway.ChaincodeEventsService.Events:output_type -> protos.ChaincodeEvent
	11, // 25: cckit.gateway.ChaincodeInstanceService.Exec:output_type -> protos.Response
	11, // 26: cckit.gateway.ChaincodeInstanceService.Query:output_type -> protos.Response
	11, // 27: cckit.gateway.ChaincodeInstanceService.Invoke:output_type -> protos.Response
	12, // 28: cckit.gateway.ChaincodeInstanceService.Events:output_type -> protos.ChaincodeEvent
	12, // 29: cckit.gateway.ChaincodeInstanceEventsService.Events:output_type -> protos.ChaincodeEvent
	20, // [20:30] is the sub-list for method output_type
	10, // [10:20] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_chaincode_proto_init() }
func file_chaincode_proto_init() {
	if File_chaincode_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chaincode_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaincodeLocator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaincodeInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaincodeExec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaincodeEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaincodeInstanceInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaincodeInstanceExec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaincodeInstanceEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chaincode_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_chaincode_proto_goTypes,
		DependencyIndexes: file_chaincode_proto_depIdxs,
		EnumInfos:         file_chaincode_proto_enumTypes,
		MessageInfos:      file_chaincode_proto_msgTypes,
	}.Build()
	File_chaincode_proto = out.File
	file_chaincode_proto_rawDesc = nil
	file_chaincode_proto_goTypes = nil
	file_chaincode_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ChaincodeServiceClient is the client API for ChaincodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChaincodeServiceClient interface {
	// Exec: Query or Invoke
	Exec(ctx context.Context, in *ChaincodeExec, opts ...grpc.CallOption) (*peer.Response, error)
	// Query chaincode on home peer. Do NOT send to orderer.
	Query(ctx context.Context, in *ChaincodeInput, opts ...grpc.CallOption) (*peer.Response, error)
	// Invoke chaincode on peers, according to endorsement policy and the SEND to orderer
	Invoke(ctx context.Context, in *ChaincodeInput, opts ...grpc.CallOption) (*peer.Response, error)
	// Chaincode events stream
	Events(ctx context.Context, in *ChaincodeEventsRequest, opts ...grpc.CallOption) (ChaincodeService_EventsClient, error)
}

type chaincodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChaincodeServiceClient(cc grpc.ClientConnInterface) ChaincodeServiceClient {
	return &chaincodeServiceClient{cc}
}

func (c *chaincodeServiceClient) Exec(ctx context.Context, in *ChaincodeExec, opts ...grpc.CallOption) (*peer.Response, error) {
	out := new(peer.Response)
	err := c.cc.Invoke(ctx, "/cckit.gateway.ChaincodeService/Exec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeServiceClient) Query(ctx context.Context, in *ChaincodeInput, opts ...grpc.CallOption) (*peer.Response, error) {
	out := new(peer.Response)
	err := c.cc.Invoke(ctx, "/cckit.gateway.ChaincodeService/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeServiceClient) Invoke(ctx context.Context, in *ChaincodeInput, opts ...grpc.CallOption) (*peer.Response, error) {
	out := new(peer.Response)
	err := c.cc.Invoke(ctx, "/cckit.gateway.ChaincodeService/Invoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeServiceClient) Events(ctx context.Context, in *ChaincodeEventsRequest, opts ...grpc.CallOption) (ChaincodeService_EventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChaincodeService_serviceDesc.Streams[0], "/cckit.gateway.ChaincodeService/Events", opts...)
	if err != nil {
		return nil, err
	}
	x := &chaincodeServiceEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChaincodeService_EventsClient interface {
	Recv() (*peer.ChaincodeEvent, error)
	grpc.ClientStream
}

type chaincodeServiceEventsClient struct {
	grpc.ClientStream
}

func (x *chaincodeServiceEventsClient) Recv() (*peer.ChaincodeEvent, error) {
	m := new(peer.ChaincodeEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChaincodeServiceServer is the server API for ChaincodeService service.
type ChaincodeServiceServer interface {
	// Exec: Query or Invoke
	Exec(context.Context, *ChaincodeExec) (*peer.Response, error)
	// Query chaincode on home peer. Do NOT send to orderer.
	Query(context.Context, *ChaincodeInput) (*peer.Response, error)
	// Invoke chaincode on peers, according to endorsement policy and the SEND to orderer
	Invoke(context.Context, *ChaincodeInput) (*peer.Response, error)
	// Chaincode events stream
	Events(*ChaincodeEventsRequest, ChaincodeService_EventsServer) error
}

// UnimplementedChaincodeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChaincodeServiceServer struct {
}

func (*UnimplementedChaincodeServiceServer) Exec(context.Context, *ChaincodeExec) (*peer.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (*UnimplementedChaincodeServiceServer) Query(context.Context, *ChaincodeInput) (*peer.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (*UnimplementedChaincodeServiceServer) Invoke(context.Context, *ChaincodeInput) (*peer.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invoke not implemented")
}
func (*UnimplementedChaincodeServiceServer) Events(*ChaincodeEventsRequest, ChaincodeService_EventsServer) error {
	return status.Errorf(codes.Unimplemented, "method Events not implemented")
}

func RegisterChaincodeServiceServer(s *grpc.Server, srv ChaincodeServiceServer) {
	s.RegisterService(&_ChaincodeService_serviceDesc, srv)
}

func _ChaincodeService_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChaincodeExec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeServiceServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cckit.gateway.ChaincodeService/Exec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeServiceServer).Exec(ctx, req.(*ChaincodeExec))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChaincodeInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cckit.gateway.ChaincodeService/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeServiceServer).Query(ctx, req.(*ChaincodeInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeService_Invoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChaincodeInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeServiceServer).Invoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cckit.gateway.ChaincodeService/Invoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeServiceServer).Invoke(ctx, req.(*ChaincodeInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeService_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChaincodeEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChaincodeServiceServer).Events(m, &chaincodeServiceEventsServer{stream})
}

type ChaincodeService_EventsServer interface {
	Send(*peer.ChaincodeEvent) error
	grpc.ServerStream
}

type chaincodeServiceEventsServer struct {
	grpc.ServerStream
}

func (x *chaincodeServiceEventsServer) Send(m *peer.ChaincodeEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _ChaincodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cckit.gateway.ChaincodeService",
	HandlerType: (*ChaincodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _ChaincodeService_Exec_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _ChaincodeService_Query_Handler,
		},
		{
			MethodName: "Invoke",
			Handler:    _ChaincodeService_Invoke_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Events",
			Handler:       _ChaincodeService_Events_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chaincode.proto",
}

// ChaincodeEventsServiceClient is the client API for ChaincodeEventsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChaincodeEventsServiceClient interface {
	// Chaincode events stream
	Events(ctx context.Context, in *ChaincodeEventsRequest, opts ...grpc.CallOption) (ChaincodeEventsService_EventsClient, error)
}

type chaincodeEventsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChaincodeEventsServiceClient(cc grpc.ClientConnInterface) ChaincodeEventsServiceClient {
	return &chaincodeEventsServiceClient{cc}
}

func (c *chaincodeEventsServiceClient) Events(ctx context.Context, in *ChaincodeEventsRequest, opts ...grpc.CallOption) (ChaincodeEventsService_EventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChaincodeEventsService_serviceDesc.Streams[0], "/cckit.gateway.ChaincodeEventsService/Events", opts...)
	if err != nil {
		return nil, err
	}
	x := &chaincodeEventsServiceEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChaincodeEventsService_EventsClient interface {
	Recv() (*peer.ChaincodeEvent, error)
	grpc.ClientStream
}

type chaincodeEventsServiceEventsClient struct {
	grpc.ClientStream
}

func (x *chaincodeEventsServiceEventsClient) Recv() (*peer.ChaincodeEvent, error) {
	m := new(peer.ChaincodeEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChaincodeEventsServiceServer is the server API for ChaincodeEventsService service.
type ChaincodeEventsServiceServer interface {
	// Chaincode events stream
	Events(*ChaincodeEventsRequest, ChaincodeEventsService_EventsServer) error
}

// UnimplementedChaincodeEventsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChaincodeEventsServiceServer struct {
}

func (*UnimplementedChaincodeEventsServiceServer) Events(*ChaincodeEventsRequest, ChaincodeEventsService_EventsServer) error {
	return status.Errorf(codes.Unimplemented, "method Events not implemented")
}

func RegisterChaincodeEventsServiceServer(s *grpc.Server, srv ChaincodeEventsServiceServer) {
	s.RegisterService(&_ChaincodeEventsService_serviceDesc, srv)
}

func _ChaincodeEventsService_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChaincodeEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChaincodeEventsServiceServer).Events(m, &chaincodeEventsServiceEventsServer{stream})
}

type ChaincodeEventsService_EventsServer interface {
	Send(*peer.ChaincodeEvent) error
	grpc.ServerStream
}

type chaincodeEventsServiceEventsServer struct {
	grpc.ServerStream
}

func (x *chaincodeEventsServiceEventsServer) Send(m *peer.ChaincodeEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _ChaincodeEventsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cckit.gateway.ChaincodeEventsService",
	HandlerType: (*ChaincodeEventsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Events",
			Handler:       _ChaincodeEventsService_Events_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chaincode.proto",
}

// ChaincodeInstanceServiceClient is the client API for ChaincodeInstanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChaincodeInstanceServiceClient interface {
	// Exec: Query or Invoke
	Exec(ctx context.Context, in *ChaincodeInstanceExec, opts ...grpc.CallOption) (*peer.Response, error)
	// Query chaincode on home peer. Do NOT send to orderer.
	Query(ctx context.Context, in *ChaincodeInstanceInput, opts ...grpc.CallOption) (*peer.Response, error)
	// Invoke chaincode on peers, according to endorsement policy and the SEND to orderer
	Invoke(ctx context.Context, in *ChaincodeInstanceInput, opts ...grpc.CallOption) (*peer.Response, error)
	// Chaincode events stream
	Events(ctx context.Context, in *ChaincodeInstanceEventsRequest, opts ...grpc.CallOption) (ChaincodeInstanceService_EventsClient, error)
}

type chaincodeInstanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChaincodeInstanceServiceClient(cc grpc.ClientConnInterface) ChaincodeInstanceServiceClient {
	return &chaincodeInstanceServiceClient{cc}
}

func (c *chaincodeInstanceServiceClient) Exec(ctx context.Context, in *ChaincodeInstanceExec, opts ...grpc.CallOption) (*peer.Response, error) {
	out := new(peer.Response)
	err := c.cc.Invoke(ctx, "/cckit.gateway.ChaincodeInstanceService/Exec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeInstanceServiceClient) Query(ctx context.Context, in *ChaincodeInstanceInput, opts ...grpc.CallOption) (*peer.Response, error) {
	out := new(peer.Response)
	err := c.cc.Invoke(ctx, "/cckit.gateway.ChaincodeInstanceService/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeInstanceServiceClient) Invoke(ctx context.Context, in *ChaincodeInstanceInput, opts ...grpc.CallOption) (*peer.Response, error) {
	out := new(peer.Response)
	err := c.cc.Invoke(ctx, "/cckit.gateway.ChaincodeInstanceService/Invoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeInstanceServiceClient) Events(ctx context.Context, in *ChaincodeInstanceEventsRequest, opts ...grpc.CallOption) (ChaincodeInstanceService_EventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChaincodeInstanceService_serviceDesc.Streams[0], "/cckit.gateway.ChaincodeInstanceService/Events", opts...)
	if err != nil {
		return nil, err
	}
	x := &chaincodeInstanceServiceEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChaincodeInstanceService_EventsClient interface {
	Recv() (*peer.ChaincodeEvent, error)
	grpc.ClientStream
}

type chaincodeInstanceServiceEventsClient struct {
	grpc.ClientStream
}

func (x *chaincodeInstanceServiceEventsClient) Recv() (*peer.ChaincodeEvent, error) {
	m := new(peer.ChaincodeEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChaincodeInstanceServiceServer is the server API for ChaincodeInstanceService service.
type ChaincodeInstanceServiceServer interface {
	// Exec: Query or Invoke
	Exec(context.Context, *ChaincodeInstanceExec) (*peer.Response, error)
	// Query chaincode on home peer. Do NOT send to orderer.
	Query(context.Context, *ChaincodeInstanceInput) (*peer.Response, error)
	// Invoke chaincode on peers, according to endorsement policy and the SEND to orderer
	Invoke(context.Context, *ChaincodeInstanceInput) (*peer.Response, error)
	// Chaincode events stream
	Events(*ChaincodeInstanceEventsRequest, ChaincodeInstanceService_EventsServer) error
}

// UnimplementedChaincodeInstanceServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChaincodeInstanceServiceServer struct {
}

func (*UnimplementedChaincodeInstanceServiceServer) Exec(context.Context, *ChaincodeInstanceExec) (*peer.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (*UnimplementedChaincodeInstanceServiceServer) Query(context.Context, *ChaincodeInstanceInput) (*peer.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (*UnimplementedChaincodeInstanceServiceServer) Invoke(context.Context, *ChaincodeInstanceInput) (*peer.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invoke not implemented")
}
func (*UnimplementedChaincodeInstanceServiceServer) Events(*ChaincodeInstanceEventsRequest, ChaincodeInstanceService_EventsServer) error {
	return status.Errorf(codes.Unimplemented, "method Events not implemented")
}

func RegisterChaincodeInstanceServiceServer(s *grpc.Server, srv ChaincodeInstanceServiceServer) {
	s.RegisterService(&_ChaincodeInstanceService_serviceDesc, srv)
}

func _ChaincodeInstanceService_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChaincodeInstanceExec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeInstanceServiceServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cckit.gateway.ChaincodeInstanceService/Exec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeInstanceServiceServer).Exec(ctx, req.(*ChaincodeInstanceExec))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeInstanceService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChaincodeInstanceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeInstanceServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cckit.gateway.ChaincodeInstanceService/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeInstanceServiceServer).Query(ctx, req.(*ChaincodeInstanceInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeInstanceService_Invoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChaincodeInstanceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeInstanceServiceServer).Invoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cckit.gateway.ChaincodeInstanceService/Invoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeInstanceServiceServer).Invoke(ctx, req.(*ChaincodeInstanceInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeInstanceService_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChaincodeInstanceEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChaincodeInstanceServiceServer).Events(m, &chaincodeInstanceServiceEventsServer{stream})
}

type ChaincodeInstanceService_EventsServer interface {
	Send(*peer.ChaincodeEvent) error
	grpc.ServerStream
}

type chaincodeInstanceServiceEventsServer struct {
	grpc.ServerStream
}

func (x *chaincodeInstanceServiceEventsServer) Send(m *peer.ChaincodeEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _ChaincodeInstanceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cckit.gateway.ChaincodeInstanceService",
	HandlerType: (*ChaincodeInstanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _ChaincodeInstanceService_Exec_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _ChaincodeInstanceService_Query_Handler,
		},
		{
			MethodName: "Invoke",
			Handler:    _ChaincodeInstanceService_Invoke_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Events",
			Handler:       _ChaincodeInstanceService_Events_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chaincode.proto",
}

// ChaincodeInstanceEventsServiceClient is the client API for ChaincodeInstanceEventsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChaincodeInstanceEventsServiceClient interface {
	// Chaincode events stream
	Events(ctx context.Context, in *ChaincodeInstanceEventsRequest, opts ...grpc.CallOption) (ChaincodeInstanceEventsService_EventsClient, error)
}

type chaincodeInstanceEventsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChaincodeInstanceEventsServiceClient(cc grpc.ClientConnInterface) ChaincodeInstanceEventsServiceClient {
	return &chaincodeInstanceEventsServiceClient{cc}
}

func (c *chaincodeInstanceEventsServiceClient) Events(ctx context.Context, in *ChaincodeInstanceEventsRequest, opts ...grpc.CallOption) (ChaincodeInstanceEventsService_EventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChaincodeInstanceEventsService_serviceDesc.Streams[0], "/cckit.gateway.ChaincodeInstanceEventsService/Events", opts...)
	if err != nil {
		return nil, err
	}
	x := &chaincodeInstanceEventsServiceEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChaincodeInstanceEventsService_EventsClient interface {
	Recv() (*peer.ChaincodeEvent, error)
	grpc.ClientStream
}

type chaincodeInstanceEventsServiceEventsClient struct {
	grpc.ClientStream
}

func (x *chaincodeInstanceEventsServiceEventsClient) Recv() (*peer.ChaincodeEvent, error) {
	m := new(peer.ChaincodeEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChaincodeInstanceEventsServiceServer is the server API for ChaincodeInstanceEventsService service.
type ChaincodeInstanceEventsServiceServer interface {
	// Chaincode events stream
	Events(*ChaincodeInstanceEventsRequest, ChaincodeInstanceEventsService_EventsServer) error
}

// UnimplementedChaincodeInstanceEventsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChaincodeInstanceEventsServiceServer struct {
}

func (*UnimplementedChaincodeInstanceEventsServiceServer) Events(*ChaincodeInstanceEventsRequest, ChaincodeInstanceEventsService_EventsServer) error {
	return status.Errorf(codes.Unimplemented, "method Events not implemented")
}

func RegisterChaincodeInstanceEventsServiceServer(s *grpc.Server, srv ChaincodeInstanceEventsServiceServer) {
	s.RegisterService(&_ChaincodeInstanceEventsService_serviceDesc, srv)
}

func _ChaincodeInstanceEventsService_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChaincodeInstanceEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChaincodeInstanceEventsServiceServer).Events(m, &chaincodeInstanceEventsServiceEventsServer{stream})
}

type ChaincodeInstanceEventsService_EventsServer interface {
	Send(*peer.ChaincodeEvent) error
	grpc.ServerStream
}

type chaincodeInstanceEventsServiceEventsServer struct {
	grpc.ServerStream
}

func (x *chaincodeInstanceEventsServiceEventsServer) Send(m *peer.ChaincodeEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _ChaincodeInstanceEventsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cckit.gateway.ChaincodeInstanceEventsService",
	HandlerType: (*ChaincodeInstanceEventsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Events",
			Handler:       _ChaincodeInstanceEventsService_Events_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chaincode.proto",
}
