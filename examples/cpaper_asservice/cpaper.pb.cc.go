// Code generated by protoc-gen-cc-gateway. DO NOT EDIT.
// source: cpaper_asservice/cpaper.proto

/*
Package cpaper_asservice contains
  *   chaincode interface definition
  *   chaincode gateway definition
  *   chaincode service to cckit router registration func
*/
package cpaper_asservice

import (
	context "context"

	cckit_gateway "github.com/s7techlab/cckit/gateway"
	cckit_ccservice "github.com/s7techlab/cckit/gateway/service"
	cckit_router "github.com/s7techlab/cckit/router"
	cckit_param "github.com/s7techlab/cckit/router/param"
	cckit_defparam "github.com/s7techlab/cckit/router/param/defparam"
	"google.golang.org/protobuf/types/known/emptypb"
)

// CPaperServiceChaincode  method names
const (
	CPaperServiceChaincode_List = "List"

	CPaperServiceChaincode_Get = "Get"

	CPaperServiceChaincode_GetByExternalId = "GetByExternalId"

	CPaperServiceChaincode_Issue = "Issue"

	CPaperServiceChaincode_Buy = "Buy"

	CPaperServiceChaincode_Redeem = "Redeem"

	CPaperServiceChaincode_Delete = "Delete"
)

// CPaperServiceChaincodeResolver interface for service resolver
type CPaperServiceChaincodeResolver interface {
	CPaperServiceChaincode(ctx cckit_router.Context) (CPaperServiceChaincode, error)
}

// CPaperServiceChaincode chaincode methods interface
type CPaperServiceChaincode interface {
	List(cckit_router.Context, *emptypb.Empty) (*CommercialPaperList, error)

	Get(cckit_router.Context, *CommercialPaperId) (*CommercialPaper, error)

	GetByExternalId(cckit_router.Context, *ExternalId) (*CommercialPaper, error)

	Issue(cckit_router.Context, *IssueCommercialPaper) (*CommercialPaper, error)

	Buy(cckit_router.Context, *BuyCommercialPaper) (*CommercialPaper, error)

	Redeem(cckit_router.Context, *RedeemCommercialPaper) (*CommercialPaper, error)

	Delete(cckit_router.Context, *CommercialPaperId) (*CommercialPaper, error)
}

// RegisterCPaperServiceChaincode registers service methods as chaincode router handlers
func RegisterCPaperServiceChaincode(r *cckit_router.Group, cc CPaperServiceChaincode) error {

	r.Query(CPaperServiceChaincode_List,
		func(ctx cckit_router.Context) (interface{}, error) {
			if v, ok := ctx.Param().(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return nil, cckit_param.PayloadValidationError(err)
				}
			}
			return cc.List(ctx, ctx.Param().(*emptypb.Empty))
		},
		cckit_defparam.Proto(&emptypb.Empty{}))

	r.Query(CPaperServiceChaincode_Get,
		func(ctx cckit_router.Context) (interface{}, error) {
			if v, ok := ctx.Param().(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return nil, cckit_param.PayloadValidationError(err)
				}
			}
			return cc.Get(ctx, ctx.Param().(*CommercialPaperId))
		},
		cckit_defparam.Proto(&CommercialPaperId{}))

	r.Query(CPaperServiceChaincode_GetByExternalId,
		func(ctx cckit_router.Context) (interface{}, error) {
			if v, ok := ctx.Param().(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return nil, cckit_param.PayloadValidationError(err)
				}
			}
			return cc.GetByExternalId(ctx, ctx.Param().(*ExternalId))
		},
		cckit_defparam.Proto(&ExternalId{}))

	r.Invoke(CPaperServiceChaincode_Issue,
		func(ctx cckit_router.Context) (interface{}, error) {
			if v, ok := ctx.Param().(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return nil, cckit_param.PayloadValidationError(err)
				}
			}
			return cc.Issue(ctx, ctx.Param().(*IssueCommercialPaper))
		},
		cckit_defparam.Proto(&IssueCommercialPaper{}))

	r.Invoke(CPaperServiceChaincode_Buy,
		func(ctx cckit_router.Context) (interface{}, error) {
			if v, ok := ctx.Param().(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return nil, cckit_param.PayloadValidationError(err)
				}
			}
			return cc.Buy(ctx, ctx.Param().(*BuyCommercialPaper))
		},
		cckit_defparam.Proto(&BuyCommercialPaper{}))

	r.Invoke(CPaperServiceChaincode_Redeem,
		func(ctx cckit_router.Context) (interface{}, error) {
			if v, ok := ctx.Param().(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return nil, cckit_param.PayloadValidationError(err)
				}
			}
			return cc.Redeem(ctx, ctx.Param().(*RedeemCommercialPaper))
		},
		cckit_defparam.Proto(&RedeemCommercialPaper{}))

	r.Invoke(CPaperServiceChaincode_Delete,
		func(ctx cckit_router.Context) (interface{}, error) {
			if v, ok := ctx.Param().(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return nil, cckit_param.PayloadValidationError(err)
				}
			}
			return cc.Delete(ctx, ctx.Param().(*CommercialPaperId))
		},
		cckit_defparam.Proto(&CommercialPaperId{}))

	return nil
}

// NewCPaperServiceGateway creates gateway to access chaincode method via chaincode service
func NewCPaperServiceGateway(ccService cckit_ccservice.Chaincode, channel, chaincode string, opts ...cckit_gateway.Opt) *CPaperServiceGateway {
	return &CPaperServiceGateway{Gateway: cckit_gateway.NewChaincode(ccService, channel, chaincode, opts...)}
}

// gateway implementation
// gateway can be used as kind of SDK, GRPC or REST server ( via grpc-gateway or clay )
type CPaperServiceGateway struct {
	Gateway cckit_gateway.Chaincode
}

// ServiceDef returns service definition
func (c *CPaperServiceGateway) ServiceDef() cckit_gateway.ServiceDef {
	return cckit_gateway.ServiceDef{
		Desc:                        &_CPaperService_serviceDesc,
		Service:                     c,
		HandlerFromEndpointRegister: RegisterCPaperServiceHandlerFromEndpoint,
	}
}

// ApiDef deprecated, use ServiceDef
func (c *CPaperServiceGateway) ApiDef() cckit_gateway.ServiceDef {
	return c.ServiceDef()
}

// Events returns events subscription
func (c *CPaperServiceGateway) Events(ctx context.Context) (cckit_gateway.ChaincodeEventSub, error) {
	return c.Gateway.Events(ctx)
}

func (c *CPaperServiceGateway) List(ctx context.Context, in *emptypb.Empty) (*CommercialPaperList, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Gateway.Query(ctx, CPaperServiceChaincode_List, []interface{}{in}, &CommercialPaperList{}); err != nil {
		return nil, err
	} else {
		return res.(*CommercialPaperList), nil
	}
}

func (c *CPaperServiceGateway) Get(ctx context.Context, in *CommercialPaperId) (*CommercialPaper, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Gateway.Query(ctx, CPaperServiceChaincode_Get, []interface{}{in}, &CommercialPaper{}); err != nil {
		return nil, err
	} else {
		return res.(*CommercialPaper), nil
	}
}

func (c *CPaperServiceGateway) GetByExternalId(ctx context.Context, in *ExternalId) (*CommercialPaper, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Gateway.Query(ctx, CPaperServiceChaincode_GetByExternalId, []interface{}{in}, &CommercialPaper{}); err != nil {
		return nil, err
	} else {
		return res.(*CommercialPaper), nil
	}
}

func (c *CPaperServiceGateway) Issue(ctx context.Context, in *IssueCommercialPaper) (*CommercialPaper, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Gateway.Invoke(ctx, CPaperServiceChaincode_Issue, []interface{}{in}, &CommercialPaper{}); err != nil {
		return nil, err
	} else {
		return res.(*CommercialPaper), nil
	}
}

func (c *CPaperServiceGateway) Buy(ctx context.Context, in *BuyCommercialPaper) (*CommercialPaper, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Gateway.Invoke(ctx, CPaperServiceChaincode_Buy, []interface{}{in}, &CommercialPaper{}); err != nil {
		return nil, err
	} else {
		return res.(*CommercialPaper), nil
	}
}

func (c *CPaperServiceGateway) Redeem(ctx context.Context, in *RedeemCommercialPaper) (*CommercialPaper, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Gateway.Invoke(ctx, CPaperServiceChaincode_Redeem, []interface{}{in}, &CommercialPaper{}); err != nil {
		return nil, err
	} else {
		return res.(*CommercialPaper), nil
	}
}

func (c *CPaperServiceGateway) Delete(ctx context.Context, in *CommercialPaperId) (*CommercialPaper, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Gateway.Invoke(ctx, CPaperServiceChaincode_Delete, []interface{}{in}, &CommercialPaper{}); err != nil {
		return nil, err
	} else {
		return res.(*CommercialPaper), nil
	}
}
