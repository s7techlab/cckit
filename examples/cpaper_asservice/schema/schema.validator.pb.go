// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: schema.proto

package schema

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/mwitkow/go-proto-validators"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *CommercialPaper) Validate() error {
	if this.IssueDate != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.IssueDate); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("IssueDate", err)
		}
	}
	if this.MaturityDate != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.MaturityDate); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("MaturityDate", err)
		}
	}
	return nil
}
func (this *CommercialPaperId) Validate() error {
	return nil
}
func (this *ExternalId) Validate() error {
	return nil
}
func (this *CommercialPaperList) Validate() error {
	for _, item := range this.Items {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Items", err)
			}
		}
	}
	return nil
}
func (this *IssueCommercialPaper) Validate() error {
	if this.Issuer == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Issuer", fmt.Errorf(`value '%v' must not be an empty string`, this.Issuer))
	}
	if this.PaperNumber == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("PaperNumber", fmt.Errorf(`value '%v' must not be an empty string`, this.PaperNumber))
	}
	if nil == this.IssueDate {
		return github_com_mwitkow_go_proto_validators.FieldError("IssueDate", fmt.Errorf("message must exist"))
	}
	if this.IssueDate != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.IssueDate); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("IssueDate", err)
		}
	}
	if nil == this.MaturityDate {
		return github_com_mwitkow_go_proto_validators.FieldError("MaturityDate", fmt.Errorf("message must exist"))
	}
	if this.MaturityDate != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.MaturityDate); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("MaturityDate", err)
		}
	}
	if !(this.FaceValue > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("FaceValue", fmt.Errorf(`value '%v' must be greater than '0'`, this.FaceValue))
	}
	if this.ExternalId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("ExternalId", fmt.Errorf(`value '%v' must not be an empty string`, this.ExternalId))
	}
	return nil
}
func (this *BuyCommercialPaper) Validate() error {
	if this.Issuer == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Issuer", fmt.Errorf(`value '%v' must not be an empty string`, this.Issuer))
	}
	if this.PaperNumber == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("PaperNumber", fmt.Errorf(`value '%v' must not be an empty string`, this.PaperNumber))
	}
	if this.CurrentOwner == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("CurrentOwner", fmt.Errorf(`value '%v' must not be an empty string`, this.CurrentOwner))
	}
	if this.NewOwner == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("NewOwner", fmt.Errorf(`value '%v' must not be an empty string`, this.NewOwner))
	}
	if !(this.Price > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("Price", fmt.Errorf(`value '%v' must be greater than '0'`, this.Price))
	}
	if nil == this.PurchaseDate {
		return github_com_mwitkow_go_proto_validators.FieldError("PurchaseDate", fmt.Errorf("message must exist"))
	}
	if this.PurchaseDate != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.PurchaseDate); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("PurchaseDate", err)
		}
	}
	return nil
}
func (this *RedeemCommercialPaper) Validate() error {
	if this.Issuer == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Issuer", fmt.Errorf(`value '%v' must not be an empty string`, this.Issuer))
	}
	if this.PaperNumber == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("PaperNumber", fmt.Errorf(`value '%v' must not be an empty string`, this.PaperNumber))
	}
	if this.RedeemingOwner == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("RedeemingOwner", fmt.Errorf(`value '%v' must not be an empty string`, this.RedeemingOwner))
	}
	if nil == this.RedeemDate {
		return github_com_mwitkow_go_proto_validators.FieldError("RedeemDate", fmt.Errorf("message must exist"))
	}
	if this.RedeemDate != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.RedeemDate); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("RedeemDate", err)
		}
	}
	return nil
}
