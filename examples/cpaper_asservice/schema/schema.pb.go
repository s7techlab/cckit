// Code generated by protoc-gen-go. DO NOT EDIT.
// source: schema.proto

package schema

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/mwitkow/go-proto-validators"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CommercialPaper_State int32

const (
	CommercialPaper_ISSUED   CommercialPaper_State = 0
	CommercialPaper_TRADING  CommercialPaper_State = 1
	CommercialPaper_REDEEMED CommercialPaper_State = 2
)

var CommercialPaper_State_name = map[int32]string{
	0: "ISSUED",
	1: "TRADING",
	2: "REDEEMED",
}

var CommercialPaper_State_value = map[string]int32{
	"ISSUED":   0,
	"TRADING":  1,
	"REDEEMED": 2,
}

func (x CommercialPaper_State) String() string {
	return proto.EnumName(CommercialPaper_State_name, int32(x))
}

func (CommercialPaper_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{0, 0}
}

// Commercial Paper state entry
type CommercialPaper struct {
	// Issuer and Paper number comprises composite primary key of Commercial paper entry
	Issuer       string                `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	PaperNumber  string                `protobuf:"bytes,2,opt,name=paper_number,json=paperNumber,proto3" json:"paper_number,omitempty"`
	Owner        string                `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	IssueDate    *timestamp.Timestamp  `protobuf:"bytes,4,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
	MaturityDate *timestamp.Timestamp  `protobuf:"bytes,5,opt,name=maturity_date,json=maturityDate,proto3" json:"maturity_date,omitempty"`
	FaceValue    int32                 `protobuf:"varint,6,opt,name=face_value,json=faceValue,proto3" json:"face_value,omitempty"`
	State        CommercialPaper_State `protobuf:"varint,7,opt,name=state,proto3,enum=schema.CommercialPaper_State" json:"state,omitempty"`
	// Additional unique field for entry
	ExternalId           string   `protobuf:"bytes,8,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommercialPaper) Reset()         { *m = CommercialPaper{} }
func (m *CommercialPaper) String() string { return proto.CompactTextString(m) }
func (*CommercialPaper) ProtoMessage()    {}
func (*CommercialPaper) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{0}
}

func (m *CommercialPaper) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommercialPaper.Unmarshal(m, b)
}
func (m *CommercialPaper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommercialPaper.Marshal(b, m, deterministic)
}
func (m *CommercialPaper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommercialPaper.Merge(m, src)
}
func (m *CommercialPaper) XXX_Size() int {
	return xxx_messageInfo_CommercialPaper.Size(m)
}
func (m *CommercialPaper) XXX_DiscardUnknown() {
	xxx_messageInfo_CommercialPaper.DiscardUnknown(m)
}

var xxx_messageInfo_CommercialPaper proto.InternalMessageInfo

func (m *CommercialPaper) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *CommercialPaper) GetPaperNumber() string {
	if m != nil {
		return m.PaperNumber
	}
	return ""
}

func (m *CommercialPaper) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *CommercialPaper) GetIssueDate() *timestamp.Timestamp {
	if m != nil {
		return m.IssueDate
	}
	return nil
}

func (m *CommercialPaper) GetMaturityDate() *timestamp.Timestamp {
	if m != nil {
		return m.MaturityDate
	}
	return nil
}

func (m *CommercialPaper) GetFaceValue() int32 {
	if m != nil {
		return m.FaceValue
	}
	return 0
}

func (m *CommercialPaper) GetState() CommercialPaper_State {
	if m != nil {
		return m.State
	}
	return CommercialPaper_ISSUED
}

func (m *CommercialPaper) GetExternalId() string {
	if m != nil {
		return m.ExternalId
	}
	return ""
}

// CommercialPaperId identifier part
type CommercialPaperId struct {
	Issuer               string   `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	PaperNumber          string   `protobuf:"bytes,2,opt,name=paper_number,json=paperNumber,proto3" json:"paper_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommercialPaperId) Reset()         { *m = CommercialPaperId{} }
func (m *CommercialPaperId) String() string { return proto.CompactTextString(m) }
func (*CommercialPaperId) ProtoMessage()    {}
func (*CommercialPaperId) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{1}
}

func (m *CommercialPaperId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommercialPaperId.Unmarshal(m, b)
}
func (m *CommercialPaperId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommercialPaperId.Marshal(b, m, deterministic)
}
func (m *CommercialPaperId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommercialPaperId.Merge(m, src)
}
func (m *CommercialPaperId) XXX_Size() int {
	return xxx_messageInfo_CommercialPaperId.Size(m)
}
func (m *CommercialPaperId) XXX_DiscardUnknown() {
	xxx_messageInfo_CommercialPaperId.DiscardUnknown(m)
}

var xxx_messageInfo_CommercialPaperId proto.InternalMessageInfo

func (m *CommercialPaperId) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *CommercialPaperId) GetPaperNumber() string {
	if m != nil {
		return m.PaperNumber
	}
	return ""
}

// ExternalId
type ExternalId struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExternalId) Reset()         { *m = ExternalId{} }
func (m *ExternalId) String() string { return proto.CompactTextString(m) }
func (*ExternalId) ProtoMessage()    {}
func (*ExternalId) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{2}
}

func (m *ExternalId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExternalId.Unmarshal(m, b)
}
func (m *ExternalId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExternalId.Marshal(b, m, deterministic)
}
func (m *ExternalId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExternalId.Merge(m, src)
}
func (m *ExternalId) XXX_Size() int {
	return xxx_messageInfo_ExternalId.Size(m)
}
func (m *ExternalId) XXX_DiscardUnknown() {
	xxx_messageInfo_ExternalId.DiscardUnknown(m)
}

var xxx_messageInfo_ExternalId proto.InternalMessageInfo

func (m *ExternalId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Container for returning multiple entities
type CommercialPaperList struct {
	Items                []*CommercialPaper `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CommercialPaperList) Reset()         { *m = CommercialPaperList{} }
func (m *CommercialPaperList) String() string { return proto.CompactTextString(m) }
func (*CommercialPaperList) ProtoMessage()    {}
func (*CommercialPaperList) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{3}
}

func (m *CommercialPaperList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommercialPaperList.Unmarshal(m, b)
}
func (m *CommercialPaperList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommercialPaperList.Marshal(b, m, deterministic)
}
func (m *CommercialPaperList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommercialPaperList.Merge(m, src)
}
func (m *CommercialPaperList) XXX_Size() int {
	return xxx_messageInfo_CommercialPaperList.Size(m)
}
func (m *CommercialPaperList) XXX_DiscardUnknown() {
	xxx_messageInfo_CommercialPaperList.DiscardUnknown(m)
}

var xxx_messageInfo_CommercialPaperList proto.InternalMessageInfo

func (m *CommercialPaperList) GetItems() []*CommercialPaper {
	if m != nil {
		return m.Items
	}
	return nil
}

// IssueCommercialPaper event
type IssueCommercialPaper struct {
	Issuer       string               `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	PaperNumber  string               `protobuf:"bytes,2,opt,name=paper_number,json=paperNumber,proto3" json:"paper_number,omitempty"`
	IssueDate    *timestamp.Timestamp `protobuf:"bytes,3,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
	MaturityDate *timestamp.Timestamp `protobuf:"bytes,4,opt,name=maturity_date,json=maturityDate,proto3" json:"maturity_date,omitempty"`
	FaceValue    int32                `protobuf:"varint,5,opt,name=face_value,json=faceValue,proto3" json:"face_value,omitempty"`
	// external_id  - once more uniq id of state entry
	ExternalId           string   `protobuf:"bytes,6,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IssueCommercialPaper) Reset()         { *m = IssueCommercialPaper{} }
func (m *IssueCommercialPaper) String() string { return proto.CompactTextString(m) }
func (*IssueCommercialPaper) ProtoMessage()    {}
func (*IssueCommercialPaper) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{4}
}

func (m *IssueCommercialPaper) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IssueCommercialPaper.Unmarshal(m, b)
}
func (m *IssueCommercialPaper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IssueCommercialPaper.Marshal(b, m, deterministic)
}
func (m *IssueCommercialPaper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssueCommercialPaper.Merge(m, src)
}
func (m *IssueCommercialPaper) XXX_Size() int {
	return xxx_messageInfo_IssueCommercialPaper.Size(m)
}
func (m *IssueCommercialPaper) XXX_DiscardUnknown() {
	xxx_messageInfo_IssueCommercialPaper.DiscardUnknown(m)
}

var xxx_messageInfo_IssueCommercialPaper proto.InternalMessageInfo

func (m *IssueCommercialPaper) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *IssueCommercialPaper) GetPaperNumber() string {
	if m != nil {
		return m.PaperNumber
	}
	return ""
}

func (m *IssueCommercialPaper) GetIssueDate() *timestamp.Timestamp {
	if m != nil {
		return m.IssueDate
	}
	return nil
}

func (m *IssueCommercialPaper) GetMaturityDate() *timestamp.Timestamp {
	if m != nil {
		return m.MaturityDate
	}
	return nil
}

func (m *IssueCommercialPaper) GetFaceValue() int32 {
	if m != nil {
		return m.FaceValue
	}
	return 0
}

func (m *IssueCommercialPaper) GetExternalId() string {
	if m != nil {
		return m.ExternalId
	}
	return ""
}

// BuyCommercialPaper event
type BuyCommercialPaper struct {
	Issuer               string               `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	PaperNumber          string               `protobuf:"bytes,2,opt,name=paper_number,json=paperNumber,proto3" json:"paper_number,omitempty"`
	CurrentOwner         string               `protobuf:"bytes,3,opt,name=current_owner,json=currentOwner,proto3" json:"current_owner,omitempty"`
	NewOwner             string               `protobuf:"bytes,4,opt,name=new_owner,json=newOwner,proto3" json:"new_owner,omitempty"`
	Price                int32                `protobuf:"varint,5,opt,name=price,proto3" json:"price,omitempty"`
	PurchaseDate         *timestamp.Timestamp `protobuf:"bytes,6,opt,name=purchase_date,json=purchaseDate,proto3" json:"purchase_date,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *BuyCommercialPaper) Reset()         { *m = BuyCommercialPaper{} }
func (m *BuyCommercialPaper) String() string { return proto.CompactTextString(m) }
func (*BuyCommercialPaper) ProtoMessage()    {}
func (*BuyCommercialPaper) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{5}
}

func (m *BuyCommercialPaper) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuyCommercialPaper.Unmarshal(m, b)
}
func (m *BuyCommercialPaper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuyCommercialPaper.Marshal(b, m, deterministic)
}
func (m *BuyCommercialPaper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuyCommercialPaper.Merge(m, src)
}
func (m *BuyCommercialPaper) XXX_Size() int {
	return xxx_messageInfo_BuyCommercialPaper.Size(m)
}
func (m *BuyCommercialPaper) XXX_DiscardUnknown() {
	xxx_messageInfo_BuyCommercialPaper.DiscardUnknown(m)
}

var xxx_messageInfo_BuyCommercialPaper proto.InternalMessageInfo

func (m *BuyCommercialPaper) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *BuyCommercialPaper) GetPaperNumber() string {
	if m != nil {
		return m.PaperNumber
	}
	return ""
}

func (m *BuyCommercialPaper) GetCurrentOwner() string {
	if m != nil {
		return m.CurrentOwner
	}
	return ""
}

func (m *BuyCommercialPaper) GetNewOwner() string {
	if m != nil {
		return m.NewOwner
	}
	return ""
}

func (m *BuyCommercialPaper) GetPrice() int32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *BuyCommercialPaper) GetPurchaseDate() *timestamp.Timestamp {
	if m != nil {
		return m.PurchaseDate
	}
	return nil
}

// RedeemCommercialPaper event
type RedeemCommercialPaper struct {
	Issuer               string               `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	PaperNumber          string               `protobuf:"bytes,2,opt,name=paper_number,json=paperNumber,proto3" json:"paper_number,omitempty"`
	RedeemingOwner       string               `protobuf:"bytes,3,opt,name=redeeming_owner,json=redeemingOwner,proto3" json:"redeeming_owner,omitempty"`
	RedeemDate           *timestamp.Timestamp `protobuf:"bytes,4,opt,name=redeem_date,json=redeemDate,proto3" json:"redeem_date,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *RedeemCommercialPaper) Reset()         { *m = RedeemCommercialPaper{} }
func (m *RedeemCommercialPaper) String() string { return proto.CompactTextString(m) }
func (*RedeemCommercialPaper) ProtoMessage()    {}
func (*RedeemCommercialPaper) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{6}
}

func (m *RedeemCommercialPaper) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedeemCommercialPaper.Unmarshal(m, b)
}
func (m *RedeemCommercialPaper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedeemCommercialPaper.Marshal(b, m, deterministic)
}
func (m *RedeemCommercialPaper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedeemCommercialPaper.Merge(m, src)
}
func (m *RedeemCommercialPaper) XXX_Size() int {
	return xxx_messageInfo_RedeemCommercialPaper.Size(m)
}
func (m *RedeemCommercialPaper) XXX_DiscardUnknown() {
	xxx_messageInfo_RedeemCommercialPaper.DiscardUnknown(m)
}

var xxx_messageInfo_RedeemCommercialPaper proto.InternalMessageInfo

func (m *RedeemCommercialPaper) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *RedeemCommercialPaper) GetPaperNumber() string {
	if m != nil {
		return m.PaperNumber
	}
	return ""
}

func (m *RedeemCommercialPaper) GetRedeemingOwner() string {
	if m != nil {
		return m.RedeemingOwner
	}
	return ""
}

func (m *RedeemCommercialPaper) GetRedeemDate() *timestamp.Timestamp {
	if m != nil {
		return m.RedeemDate
	}
	return nil
}

func init() {
	proto.RegisterEnum("schema.CommercialPaper_State", CommercialPaper_State_name, CommercialPaper_State_value)
	proto.RegisterType((*CommercialPaper)(nil), "schema.CommercialPaper")
	proto.RegisterType((*CommercialPaperId)(nil), "schema.CommercialPaperId")
	proto.RegisterType((*ExternalId)(nil), "schema.ExternalId")
	proto.RegisterType((*CommercialPaperList)(nil), "schema.CommercialPaperList")
	proto.RegisterType((*IssueCommercialPaper)(nil), "schema.IssueCommercialPaper")
	proto.RegisterType((*BuyCommercialPaper)(nil), "schema.BuyCommercialPaper")
	proto.RegisterType((*RedeemCommercialPaper)(nil), "schema.RedeemCommercialPaper")
}

func init() { proto.RegisterFile("schema.proto", fileDescriptor_1c5fb4d8cc22d66a) }

var fileDescriptor_1c5fb4d8cc22d66a = []byte{
	// 597 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0x5d, 0x6b, 0xd4, 0x40,
	0x14, 0x6d, 0xb2, 0x4d, 0xda, 0xbd, 0xbb, 0x6d, 0xd7, 0xb1, 0x6a, 0x28, 0xad, 0x8d, 0x11, 0x71,
	0x45, 0x9a, 0x40, 0x0b, 0x82, 0x4f, 0xd2, 0x36, 0xa1, 0x2c, 0x68, 0x95, 0xb4, 0x8a, 0x6f, 0xcb,
	0x6c, 0x32, 0xdd, 0x1d, 0xdc, 0x7c, 0x30, 0x99, 0x74, 0xed, 0xb3, 0x7f, 0xc2, 0x3f, 0xe3, 0xff,
	0xf0, 0x4d, 0xf0, 0x97, 0x48, 0x66, 0xb2, 0x61, 0x13, 0x2a, 0xad, 0x48, 0xdf, 0x32, 0xe7, 0x9e,
	0x7b, 0xe7, 0x9e, 0x33, 0x27, 0xd0, 0xcd, 0x82, 0x09, 0x89, 0xb0, 0x9d, 0xb2, 0x84, 0x27, 0x48,
	0x97, 0xa7, 0xad, 0xdd, 0x71, 0x92, 0x8c, 0xa7, 0xc4, 0x11, 0xe8, 0x28, 0xbf, 0x70, 0x38, 0x8d,
	0x48, 0xc6, 0x71, 0x94, 0x4a, 0xe2, 0xd6, 0xab, 0x31, 0xe5, 0x93, 0x7c, 0x64, 0x07, 0x49, 0xe4,
	0x44, 0x33, 0xca, 0xbf, 0x24, 0x33, 0x67, 0x9c, 0xec, 0x89, 0xe2, 0xde, 0x25, 0x9e, 0xd2, 0x10,
	0xf3, 0x84, 0x65, 0x4e, 0xf5, 0x29, 0xfb, 0xac, 0x6f, 0x2d, 0xd8, 0x38, 0x4e, 0xa2, 0x88, 0xb0,
	0x80, 0xe2, 0xe9, 0x07, 0x9c, 0x12, 0x86, 0x1e, 0x82, 0x4e, 0xb3, 0x2c, 0x27, 0xcc, 0x50, 0x4c,
	0xa5, 0xdf, 0xf6, 0xcb, 0x13, 0x7a, 0x02, 0xdd, 0xb4, 0x20, 0x0c, 0xe3, 0x3c, 0x1a, 0x11, 0x66,
	0xa8, 0xa2, 0xda, 0x11, 0xd8, 0xa9, 0x80, 0xd0, 0x26, 0x68, 0xc9, 0x2c, 0x26, 0xcc, 0x68, 0x89,
	0x9a, 0x3c, 0xa0, 0xd7, 0x00, 0x62, 0xc4, 0x30, 0xc4, 0x9c, 0x18, 0xcb, 0xa6, 0xd2, 0xef, 0xec,
	0x6f, 0xd9, 0x52, 0x92, 0x3d, 0x97, 0x64, 0x9f, 0xcf, 0x25, 0xf9, 0x6d, 0xc1, 0x76, 0x31, 0x27,
	0xe8, 0x0d, 0xac, 0x45, 0x98, 0xe7, 0x8c, 0xf2, 0x2b, 0xd9, 0xad, 0xdd, 0xd8, 0xdd, 0x9d, 0x37,
	0x88, 0x01, 0x3b, 0x00, 0x17, 0x38, 0x20, 0xc3, 0x4b, 0x3c, 0xcd, 0x89, 0xa1, 0x9b, 0x4a, 0x5f,
	0xf3, 0xdb, 0x05, 0xf2, 0xa9, 0x00, 0xd0, 0x01, 0x68, 0x19, 0x2f, 0xe6, 0xae, 0x98, 0x4a, 0x7f,
	0x7d, 0x7f, 0xc7, 0x2e, 0xed, 0x6f, 0x78, 0x62, 0x9f, 0x15, 0x24, 0x5f, 0x72, 0xd1, 0x2e, 0x74,
	0xc8, 0x57, 0x4e, 0x58, 0x8c, 0xa7, 0x43, 0x1a, 0x1a, 0xab, 0x42, 0x2b, 0xcc, 0xa1, 0x41, 0x68,
	0xd9, 0xa0, 0x89, 0x06, 0x04, 0xa0, 0x0f, 0xce, 0xce, 0x3e, 0x7a, 0x6e, 0x6f, 0x09, 0x75, 0x60,
	0xe5, 0xdc, 0x3f, 0x74, 0x07, 0xa7, 0x27, 0x3d, 0x05, 0x75, 0x61, 0xd5, 0xf7, 0x5c, 0xcf, 0x7b,
	0xe7, 0xb9, 0x3d, 0xd5, 0x3a, 0x85, 0x7b, 0x8d, 0x0b, 0x07, 0xe1, 0x7f, 0x3c, 0x83, 0xb5, 0x0d,
	0xe0, 0x55, 0xdb, 0xa0, 0x75, 0x50, 0x69, 0x58, 0x0e, 0x51, 0x69, 0x68, 0xb9, 0x70, 0xbf, 0x71,
	0xdb, 0x5b, 0x9a, 0x71, 0xb4, 0x07, 0x1a, 0xe5, 0x24, 0xca, 0x0c, 0xc5, 0x6c, 0xf5, 0x3b, 0xfb,
	0x8f, 0xfe, 0x62, 0x85, 0x2f, 0x59, 0xd6, 0x0f, 0x15, 0x36, 0x07, 0xc5, 0x46, 0xcd, 0xf8, 0x3c,
	0xae, 0xef, 0x7d, 0xa4, 0xff, 0xfe, 0xb5, 0xab, 0x7e, 0x56, 0xaa, 0xfd, 0x5f, 0x5c, 0xb7, 0x7f,
	0xc5, 0xaa, 0xc5, 0xe9, 0xb0, 0x16, 0x9c, 0xd6, 0x4d, 0x4f, 0x2f, 0x87, 0x98, 0xca, 0x62, 0x80,
	0x4e, 0x9a, 0x01, 0x5a, 0xbe, 0xf5, 0x94, 0x7a, 0x90, 0x9e, 0xd5, 0x82, 0x54, 0xc4, 0x50, 0x93,
	0xcc, 0xde, 0xd2, 0x62, 0xa0, 0x9e, 0xd7, 0xb3, 0xa1, 0xd7, 0xc4, 0x2d, 0x66, 0xe4, 0xbb, 0x0a,
	0xe8, 0x28, 0xbf, 0xba, 0x43, 0xf7, 0x5e, 0xc2, 0x5a, 0x90, 0x33, 0x46, 0x62, 0x3e, 0x5c, 0xf8,
	0x29, 0x2b, 0x6e, 0xb7, 0x2c, 0xbe, 0x17, 0xff, 0xe8, 0x53, 0x68, 0xc7, 0x64, 0x56, 0x12, 0x97,
	0x6b, 0xc4, 0xd5, 0x98, 0xcc, 0x24, 0x69, 0x1b, 0xb4, 0x94, 0xd1, 0xa0, 0x29, 0x5f, 0x82, 0x85,
	0xd5, 0x69, 0xce, 0x82, 0x09, 0xce, 0xca, 0x07, 0xd3, 0x6f, 0x6f, 0xf5, 0xbc, 0xb1, 0xb0, 0xda,
	0xfa, 0xa9, 0xc0, 0x03, 0x9f, 0x84, 0x84, 0x44, 0x77, 0xe8, 0x8e, 0x03, 0x1b, 0x4c, 0xdc, 0x41,
	0xe3, 0xf1, 0xb5, 0xfe, 0xac, 0x57, 0x65, 0x29, 0xfe, 0x18, 0x3a, 0x12, 0xf9, 0xd7, 0x1c, 0x81,
	0x6c, 0x2b, 0xa4, 0x8d, 0x74, 0xc1, 0x3b, 0xf8, 0x13, 0x00, 0x00, 0xff, 0xff, 0x86, 0x93, 0x97,
	0x11, 0xe7, 0x05, 0x00, 0x00,
}
