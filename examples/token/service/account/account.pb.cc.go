// Code generated by protoc-gen-cc-gateway. DO NOT EDIT.
// source: token/service/account/account.proto

/*
Package account contains
  *   chaincode methods names {service_name}Chaincode_{method_name}
  *   chaincode interface definition {service_name}Chaincode
  *   chaincode gateway definition {service_name}}Gateway
  *   chaincode service to cckit router registration func
*/
package account

import (
	context "context"
	_ "embed"
	errors "errors"

	cckit_gateway "github.com/s7techlab/cckit/gateway"
	cckit_router "github.com/s7techlab/cckit/router"
	cckit_defparam "github.com/s7techlab/cckit/router/param/defparam"
	cckit_sdk "github.com/s7techlab/cckit/sdk"
	"google.golang.org/protobuf/types/known/emptypb"
)

// AccountServiceChaincode method names
const (

	// AccountServiceChaincodeMethodPrefix allows to use multiple services with same method names in one chaincode
	AccountServiceChaincodeMethodPrefix = ""

	AccountServiceChaincode_GetInvokerAddress = AccountServiceChaincodeMethodPrefix + "GetInvokerAddress"

	AccountServiceChaincode_GetAddress = AccountServiceChaincodeMethodPrefix + "GetAddress"

	AccountServiceChaincode_GetAccount = AccountServiceChaincodeMethodPrefix + "GetAccount"
)

// AccountServiceChaincode chaincode methods interface
type AccountServiceChaincode interface {
	GetInvokerAddress(cckit_router.Context, *emptypb.Empty) (*AddressId, error)

	GetAddress(cckit_router.Context, *GetAddressRequest) (*AddressId, error)

	GetAccount(cckit_router.Context, *AccountId) (*Account, error)
}

// RegisterAccountServiceChaincode registers service methods as chaincode router handlers
func RegisterAccountServiceChaincode(r *cckit_router.Group, cc AccountServiceChaincode) error {

	r.Query(AccountServiceChaincode_GetInvokerAddress,
		func(ctx cckit_router.Context) (interface{}, error) {
			return cc.GetInvokerAddress(ctx, ctx.Param().(*emptypb.Empty))
		},
		cckit_defparam.Proto(&emptypb.Empty{}))

	r.Query(AccountServiceChaincode_GetAddress,
		func(ctx cckit_router.Context) (interface{}, error) {
			return cc.GetAddress(ctx, ctx.Param().(*GetAddressRequest))
		},
		cckit_defparam.Proto(&GetAddressRequest{}))

	r.Query(AccountServiceChaincode_GetAccount,
		func(ctx cckit_router.Context) (interface{}, error) {
			return cc.GetAccount(ctx, ctx.Param().(*AccountId))
		},
		cckit_defparam.Proto(&AccountId{}))

	return nil
}

//go:embed account.swagger.json
var AccountServiceSwagger []byte

// NewAccountServiceGateway creates gateway to access chaincode method via chaincode service
func NewAccountServiceGateway(sdk cckit_sdk.SDK, channel, chaincode string, opts ...cckit_gateway.Opt) *AccountServiceGateway {
	return NewAccountServiceGatewayFromInstance(
		cckit_gateway.NewChaincodeInstanceService(
			sdk,
			&cckit_gateway.ChaincodeLocator{Channel: channel, Chaincode: chaincode},
			opts...,
		))
}

func NewAccountServiceGatewayFromInstance(chaincodeInstance cckit_gateway.ChaincodeInstance) *AccountServiceGateway {
	return &AccountServiceGateway{
		ChaincodeInstance: chaincodeInstance,
	}
}

// gateway implementation
// gateway can be used as kind of SDK, GRPC or REST server ( via grpc-gateway or clay )
type AccountServiceGateway struct {
	ChaincodeInstance cckit_gateway.ChaincodeInstance
}

func (c *AccountServiceGateway) Invoker() cckit_gateway.ChaincodeInstanceInvoker {
	return cckit_gateway.NewChaincodeInstanceServiceInvoker(c.ChaincodeInstance)
}

// ServiceDef returns service definition
func (c *AccountServiceGateway) ServiceDef() cckit_gateway.ServiceDef {
	return cckit_gateway.NewServiceDef(
		_AccountService_serviceDesc.ServiceName,
		AccountServiceSwagger,
		&_AccountService_serviceDesc,
		c,
		RegisterAccountServiceHandlerFromEndpoint,
	)
}

func (c *AccountServiceGateway) GetInvokerAddress(ctx context.Context, in *emptypb.Empty) (*AddressId, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker().Query(ctx, AccountServiceChaincode_GetInvokerAddress, []interface{}{in}, &AddressId{}); err != nil {
		return nil, err
	} else {
		return res.(*AddressId), nil
	}
}

func (c *AccountServiceGateway) GetAddress(ctx context.Context, in *GetAddressRequest) (*AddressId, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker().Query(ctx, AccountServiceChaincode_GetAddress, []interface{}{in}, &AddressId{}); err != nil {
		return nil, err
	} else {
		return res.(*AddressId), nil
	}
}

func (c *AccountServiceGateway) GetAccount(ctx context.Context, in *AccountId) (*Account, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker().Query(ctx, AccountServiceChaincode_GetAccount, []interface{}{in}, &Account{}); err != nil {
		return nil, err
	} else {
		return res.(*Account), nil
	}
}

// AccountServiceChaincodeResolver interface for service resolver
type (
	AccountServiceChaincodeResolver interface {
		Resolve(ctx cckit_router.Context) (AccountServiceChaincode, error)
	}

	AccountServiceChaincodeLocalResolver struct {
		service AccountServiceChaincode
	}

	AccountServiceChaincodeLocatorResolver struct {
		locatorResolver cckit_gateway.ChaincodeLocatorResolver
		service         AccountServiceChaincode
	}
)

func NewAccountServiceChaincodeLocalResolver(service AccountServiceChaincode) *AccountServiceChaincodeLocalResolver {
	return &AccountServiceChaincodeLocalResolver{
		service: service,
	}
}

func (r *AccountServiceChaincodeLocalResolver) Resolve(ctx cckit_router.Context) (AccountServiceChaincode, error) {
	if r.service == nil {
		return nil, errors.New("service not set for local chaincode resolver")
	}

	return r.service, nil
}

func NewAccountServiceChaincodeResolver(locatorResolver cckit_gateway.ChaincodeLocatorResolver) *AccountServiceChaincodeLocatorResolver {
	return &AccountServiceChaincodeLocatorResolver{
		locatorResolver: locatorResolver,
	}
}

func (r *AccountServiceChaincodeLocatorResolver) Resolve(ctx cckit_router.Context) (AccountServiceChaincode, error) {
	if r.service != nil {
		return r.service, nil
	}

	locator, err := r.locatorResolver(ctx, _AccountService_serviceDesc.ServiceName)
	if err != nil {
		return nil, err
	}

	r.service = NewAccountServiceChaincodeStubInvoker(locator)
	return r.service, nil
}

type AccountServiceChaincodeStubInvoker struct {
	Invoker cckit_gateway.ChaincodeStubInvoker
}

func NewAccountServiceChaincodeStubInvoker(locator *cckit_gateway.ChaincodeLocator) *AccountServiceChaincodeStubInvoker {
	return &AccountServiceChaincodeStubInvoker{
		Invoker: &cckit_gateway.LocatorChaincodeStubInvoker{Locator: locator},
	}
}

func (c *AccountServiceChaincodeStubInvoker) GetInvokerAddress(ctx cckit_router.Context, in *emptypb.Empty) (*AddressId, error) {

	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker.Query(ctx.Stub(), AccountServiceChaincode_GetInvokerAddress, []interface{}{in}, &AddressId{}); err != nil {
		return nil, err
	} else {
		return res.(*AddressId), nil
	}

}

func (c *AccountServiceChaincodeStubInvoker) GetAddress(ctx cckit_router.Context, in *GetAddressRequest) (*AddressId, error) {

	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker.Query(ctx.Stub(), AccountServiceChaincode_GetAddress, []interface{}{in}, &AddressId{}); err != nil {
		return nil, err
	} else {
		return res.(*AddressId), nil
	}

}

func (c *AccountServiceChaincodeStubInvoker) GetAccount(ctx cckit_router.Context, in *AccountId) (*Account, error) {

	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker.Query(ctx.Stub(), AccountServiceChaincode_GetAccount, []interface{}{in}, &Account{}); err != nil {
		return nil, err
	} else {
		return res.(*Account), nil
	}

}
