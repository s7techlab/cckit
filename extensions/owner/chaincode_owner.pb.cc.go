// Code generated by protoc-gen-cc-gateway. DO NOT EDIT.
// source: owner/chaincode_owner.proto

/*
Package owner contains
  *   chaincode interface definition
  *   chaincode gateway definition
  *   chaincode service to cckit router registration func
*/
package owner

import (
	context "context"

	"github.com/golang/protobuf/ptypes/empty"
	cckit_gateway "github.com/s7techlab/cckit/gateway"
	cckit_ccservice "github.com/s7techlab/cckit/gateway/service"
	cckit_router "github.com/s7techlab/cckit/router"
	cckit_param "github.com/s7techlab/cckit/router/param"
	cckit_defparam "github.com/s7techlab/cckit/router/param/defparam"
)

// ChaincodeOwnerServiceChaincode  method names
const (
	ChaincodeOwnerServiceChaincode_TxCreatorIsOwner = "TxCreatorIsOwner"

	ChaincodeOwnerServiceChaincode_OwnersList = "OwnersList"

	ChaincodeOwnerServiceChaincode_OwnerGet = "OwnerGet"

	ChaincodeOwnerServiceChaincode_OwnerRegister = "OwnerRegister"

	ChaincodeOwnerServiceChaincode_OwnerUpdate = "OwnerUpdate"

	ChaincodeOwnerServiceChaincode_OwnerDelete = "OwnerDelete"
)

// ChaincodeOwnerServiceChaincodeResolver interface for service resolver
type ChaincodeOwnerServiceChaincodeResolver interface {
	ChaincodeOwnerServiceChaincode(ctx cckit_router.Context) (ChaincodeOwnerServiceChaincode, error)
}

// ChaincodeOwnerServiceChaincode chaincode methods interface
type ChaincodeOwnerServiceChaincode interface {
	TxCreatorIsOwner(cckit_router.Context, *empty.Empty) (*ChaincodeOwner, error)

	OwnersList(cckit_router.Context, *empty.Empty) (*ChaincodeOwners, error)

	OwnerGet(cckit_router.Context, *OwnerId) (*ChaincodeOwner, error)

	OwnerRegister(cckit_router.Context, *OwnerRegisterRequest) (*ChaincodeOwner, error)

	OwnerUpdate(cckit_router.Context, *OwnerUpdateRequest) (*ChaincodeOwner, error)

	OwnerDelete(cckit_router.Context, *OwnerId) (*ChaincodeOwner, error)
}

// RegisterChaincodeOwnerServiceChaincode registers service methods as chaincode router handlers
func RegisterChaincodeOwnerServiceChaincode(r *cckit_router.Group, cc ChaincodeOwnerServiceChaincode) error {

	r.Query(ChaincodeOwnerServiceChaincode_TxCreatorIsOwner,
		func(ctx cckit_router.Context) (interface{}, error) {
			if v, ok := ctx.Param().(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return nil, cckit_param.PayloadValidationError(err)
				}
			}
			return cc.TxCreatorIsOwner(ctx, ctx.Param().(*empty.Empty))
		},
		cckit_defparam.Proto(&empty.Empty{}))

	r.Query(ChaincodeOwnerServiceChaincode_OwnersList,
		func(ctx cckit_router.Context) (interface{}, error) {
			if v, ok := ctx.Param().(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return nil, cckit_param.PayloadValidationError(err)
				}
			}
			return cc.OwnersList(ctx, ctx.Param().(*empty.Empty))
		},
		cckit_defparam.Proto(&empty.Empty{}))

	r.Query(ChaincodeOwnerServiceChaincode_OwnerGet,
		func(ctx cckit_router.Context) (interface{}, error) {
			if v, ok := ctx.Param().(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return nil, cckit_param.PayloadValidationError(err)
				}
			}
			return cc.OwnerGet(ctx, ctx.Param().(*OwnerId))
		},
		cckit_defparam.Proto(&OwnerId{}))

	r.Invoke(ChaincodeOwnerServiceChaincode_OwnerRegister,
		func(ctx cckit_router.Context) (interface{}, error) {
			if v, ok := ctx.Param().(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return nil, cckit_param.PayloadValidationError(err)
				}
			}
			return cc.OwnerRegister(ctx, ctx.Param().(*OwnerRegisterRequest))
		},
		cckit_defparam.Proto(&OwnerRegisterRequest{}))

	r.Invoke(ChaincodeOwnerServiceChaincode_OwnerUpdate,
		func(ctx cckit_router.Context) (interface{}, error) {
			if v, ok := ctx.Param().(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return nil, cckit_param.PayloadValidationError(err)
				}
			}
			return cc.OwnerUpdate(ctx, ctx.Param().(*OwnerUpdateRequest))
		},
		cckit_defparam.Proto(&OwnerUpdateRequest{}))

	r.Invoke(ChaincodeOwnerServiceChaincode_OwnerDelete,
		func(ctx cckit_router.Context) (interface{}, error) {
			if v, ok := ctx.Param().(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return nil, cckit_param.PayloadValidationError(err)
				}
			}
			return cc.OwnerDelete(ctx, ctx.Param().(*OwnerId))
		},
		cckit_defparam.Proto(&OwnerId{}))

	return nil
}

// NewChaincodeOwnerServiceGateway creates gateway to access chaincode method via chaincode service
func NewChaincodeOwnerServiceGateway(ccService cckit_ccservice.Chaincode, channel, chaincode string, opts ...cckit_gateway.Opt) *ChaincodeOwnerServiceGateway {
	return &ChaincodeOwnerServiceGateway{Gateway: cckit_gateway.NewChaincode(ccService, channel, chaincode, opts...)}
}

// gateway implementation
// gateway can be used as kind of SDK, GRPC or REST server ( via grpc-gateway or clay )
type ChaincodeOwnerServiceGateway struct {
	Gateway cckit_gateway.Chaincode
}

// ServiceDef returns service definition
func (c *ChaincodeOwnerServiceGateway) ServiceDef() cckit_gateway.ServiceDef {
	return cckit_gateway.ServiceDef{
		Desc:                        &_ChaincodeOwnerService_serviceDesc,
		Service:                     c,
		HandlerFromEndpointRegister: RegisterChaincodeOwnerServiceHandlerFromEndpoint,
	}
}

// ApiDef deprecated, use ServiceDef
func (c *ChaincodeOwnerServiceGateway) ApiDef() cckit_gateway.ServiceDef {
	return c.ServiceDef()
}

// Events returns events subscription
func (c *ChaincodeOwnerServiceGateway) Events(ctx context.Context) (cckit_gateway.ChaincodeEventSub, error) {
	return c.Gateway.Events(ctx)
}

func (c *ChaincodeOwnerServiceGateway) TxCreatorIsOwner(ctx context.Context, in *empty.Empty) (*ChaincodeOwner, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Gateway.Query(ctx, ChaincodeOwnerServiceChaincode_TxCreatorIsOwner, []interface{}{in}, &ChaincodeOwner{}); err != nil {
		return nil, err
	} else {
		return res.(*ChaincodeOwner), nil
	}
}

func (c *ChaincodeOwnerServiceGateway) OwnersList(ctx context.Context, in *empty.Empty) (*ChaincodeOwners, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Gateway.Query(ctx, ChaincodeOwnerServiceChaincode_OwnersList, []interface{}{in}, &ChaincodeOwners{}); err != nil {
		return nil, err
	} else {
		return res.(*ChaincodeOwners), nil
	}
}

func (c *ChaincodeOwnerServiceGateway) OwnerGet(ctx context.Context, in *OwnerId) (*ChaincodeOwner, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Gateway.Query(ctx, ChaincodeOwnerServiceChaincode_OwnerGet, []interface{}{in}, &ChaincodeOwner{}); err != nil {
		return nil, err
	} else {
		return res.(*ChaincodeOwner), nil
	}
}

func (c *ChaincodeOwnerServiceGateway) OwnerRegister(ctx context.Context, in *OwnerRegisterRequest) (*ChaincodeOwner, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Gateway.Invoke(ctx, ChaincodeOwnerServiceChaincode_OwnerRegister, []interface{}{in}, &ChaincodeOwner{}); err != nil {
		return nil, err
	} else {
		return res.(*ChaincodeOwner), nil
	}
}

func (c *ChaincodeOwnerServiceGateway) OwnerUpdate(ctx context.Context, in *OwnerUpdateRequest) (*ChaincodeOwner, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Gateway.Invoke(ctx, ChaincodeOwnerServiceChaincode_OwnerUpdate, []interface{}{in}, &ChaincodeOwner{}); err != nil {
		return nil, err
	} else {
		return res.(*ChaincodeOwner), nil
	}
}

func (c *ChaincodeOwnerServiceGateway) OwnerDelete(ctx context.Context, in *OwnerId) (*ChaincodeOwner, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Gateway.Invoke(ctx, ChaincodeOwnerServiceChaincode_OwnerDelete, []interface{}{in}, &ChaincodeOwner{}); err != nil {
		return nil, err
	} else {
		return res.(*ChaincodeOwner), nil
	}
}
