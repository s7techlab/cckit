// Chaincode owner service

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: owner/chaincode_owner.proto

package owner

import (
	context "context"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// List: Chaincode owners
type ChaincodeOwners struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*ChaincodeOwner `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ChaincodeOwners) Reset() {
	*x = ChaincodeOwners{}
	if protoimpl.UnsafeEnabled {
		mi := &file_owner_chaincode_owner_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaincodeOwners) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaincodeOwners) ProtoMessage() {}

func (x *ChaincodeOwners) ProtoReflect() protoreflect.Message {
	mi := &file_owner_chaincode_owner_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaincodeOwners.ProtoReflect.Descriptor instead.
func (*ChaincodeOwners) Descriptor() ([]byte, []int) {
	return file_owner_chaincode_owner_proto_rawDescGZIP(), []int{0}
}

func (x *ChaincodeOwners) GetItems() []*ChaincodeOwner {
	if x != nil {
		return x.Items
	}
	return nil
}

// State: information stored in chaincode state about chaincode owner
type ChaincodeOwner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Msp Id
	MspId string `protobuf:"bytes,1,opt,name=msp_id,json=mspId,proto3" json:"msp_id,omitempty"`
	//  certificate subject
	Subject string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	//  certificate issuer
	Issuer string `protobuf:"bytes,3,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// cert valid not after
	ExpiresAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	// Certificate
	Cert []byte `protobuf:"bytes,5,opt,name=cert,proto3" json:"cert,omitempty"`
	// Creator identity info
	UpdatedByMspId string `protobuf:"bytes,6,opt,name=updated_by_msp_id,json=updatedByMspId,proto3" json:"updated_by_msp_id,omitempty"`
	// Certificate
	UpdatedByCert []byte `protobuf:"bytes,7,opt,name=updated_by_cert,json=updatedByCert,proto3" json:"updated_by_cert,omitempty"`
	// Updated at
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ChaincodeOwner) Reset() {
	*x = ChaincodeOwner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_owner_chaincode_owner_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaincodeOwner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaincodeOwner) ProtoMessage() {}

func (x *ChaincodeOwner) ProtoReflect() protoreflect.Message {
	mi := &file_owner_chaincode_owner_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaincodeOwner.ProtoReflect.Descriptor instead.
func (*ChaincodeOwner) Descriptor() ([]byte, []int) {
	return file_owner_chaincode_owner_proto_rawDescGZIP(), []int{1}
}

func (x *ChaincodeOwner) GetMspId() string {
	if x != nil {
		return x.MspId
	}
	return ""
}

func (x *ChaincodeOwner) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *ChaincodeOwner) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *ChaincodeOwner) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *ChaincodeOwner) GetCert() []byte {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *ChaincodeOwner) GetUpdatedByMspId() string {
	if x != nil {
		return x.UpdatedByMspId
	}
	return ""
}

func (x *ChaincodeOwner) GetUpdatedByCert() []byte {
	if x != nil {
		return x.UpdatedByCert
	}
	return nil
}

func (x *ChaincodeOwner) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// Request: register owner
type CreateOwnerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Msp Id
	MspId string `protobuf:"bytes,1,opt,name=msp_id,json=mspId,proto3" json:"msp_id,omitempty"`
	// Certificate
	Cert []byte `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
}

func (x *CreateOwnerRequest) Reset() {
	*x = CreateOwnerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_owner_chaincode_owner_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOwnerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOwnerRequest) ProtoMessage() {}

func (x *CreateOwnerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_owner_chaincode_owner_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOwnerRequest.ProtoReflect.Descriptor instead.
func (*CreateOwnerRequest) Descriptor() ([]byte, []int) {
	return file_owner_chaincode_owner_proto_rawDescGZIP(), []int{2}
}

func (x *CreateOwnerRequest) GetMspId() string {
	if x != nil {
		return x.MspId
	}
	return ""
}

func (x *CreateOwnerRequest) GetCert() []byte {
	if x != nil {
		return x.Cert
	}
	return nil
}

// Request: update owner certificate
type UpdateOwnerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Msp Id
	MspId string `protobuf:"bytes,1,opt,name=msp_id,json=mspId,proto3" json:"msp_id,omitempty"`
	// Current certificate
	Cert []byte `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
}

func (x *UpdateOwnerRequest) Reset() {
	*x = UpdateOwnerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_owner_chaincode_owner_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOwnerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOwnerRequest) ProtoMessage() {}

func (x *UpdateOwnerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_owner_chaincode_owner_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOwnerRequest.ProtoReflect.Descriptor instead.
func (*UpdateOwnerRequest) Descriptor() ([]byte, []int) {
	return file_owner_chaincode_owner_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateOwnerRequest) GetMspId() string {
	if x != nil {
		return x.MspId
	}
	return ""
}

func (x *UpdateOwnerRequest) GetCert() []byte {
	if x != nil {
		return x.Cert
	}
	return nil
}

// Id: owner identifier
type OwnerId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Msp Id
	MspId string `protobuf:"bytes,1,opt,name=msp_id,json=mspId,proto3" json:"msp_id,omitempty"`
	// Certificate subject
	Subject string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
}

func (x *OwnerId) Reset() {
	*x = OwnerId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_owner_chaincode_owner_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OwnerId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnerId) ProtoMessage() {}

func (x *OwnerId) ProtoReflect() protoreflect.Message {
	mi := &file_owner_chaincode_owner_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnerId.ProtoReflect.Descriptor instead.
func (*OwnerId) Descriptor() ([]byte, []int) {
	return file_owner_chaincode_owner_proto_rawDescGZIP(), []int{4}
}

func (x *OwnerId) GetMspId() string {
	if x != nil {
		return x.MspId
	}
	return ""
}

func (x *OwnerId) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

// Event: new chaincode owner registered
type ChaincodeOwnerCreated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Msp Id
	MspId string `protobuf:"bytes,1,opt,name=msp_id,json=mspId,proto3" json:"msp_id,omitempty"`
	// certificate subject
	Subject string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	//  certificate issuer
	Issuer string `protobuf:"bytes,3,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// cert valid not after
	ExpiresAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
}

func (x *ChaincodeOwnerCreated) Reset() {
	*x = ChaincodeOwnerCreated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_owner_chaincode_owner_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaincodeOwnerCreated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaincodeOwnerCreated) ProtoMessage() {}

func (x *ChaincodeOwnerCreated) ProtoReflect() protoreflect.Message {
	mi := &file_owner_chaincode_owner_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaincodeOwnerCreated.ProtoReflect.Descriptor instead.
func (*ChaincodeOwnerCreated) Descriptor() ([]byte, []int) {
	return file_owner_chaincode_owner_proto_rawDescGZIP(), []int{5}
}

func (x *ChaincodeOwnerCreated) GetMspId() string {
	if x != nil {
		return x.MspId
	}
	return ""
}

func (x *ChaincodeOwnerCreated) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *ChaincodeOwnerCreated) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *ChaincodeOwnerCreated) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

// Event: new chaincode owner registered
type ChaincodeOwnerUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Msp Id
	MspId string `protobuf:"bytes,1,opt,name=msp_id,json=mspId,proto3" json:"msp_id,omitempty"`
	// certificate subject
	Subject string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	// cert valid not after
	ExpiresAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
}

func (x *ChaincodeOwnerUpdated) Reset() {
	*x = ChaincodeOwnerUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_owner_chaincode_owner_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaincodeOwnerUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaincodeOwnerUpdated) ProtoMessage() {}

func (x *ChaincodeOwnerUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_owner_chaincode_owner_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaincodeOwnerUpdated.ProtoReflect.Descriptor instead.
func (*ChaincodeOwnerUpdated) Descriptor() ([]byte, []int) {
	return file_owner_chaincode_owner_proto_rawDescGZIP(), []int{6}
}

func (x *ChaincodeOwnerUpdated) GetMspId() string {
	if x != nil {
		return x.MspId
	}
	return ""
}

func (x *ChaincodeOwnerUpdated) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *ChaincodeOwnerUpdated) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

// Event: chaincode owner deleted`
type ChaincodeOwnerDeleted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Msp Id
	MspId string `protobuf:"bytes,1,opt,name=msp_id,json=mspId,proto3" json:"msp_id,omitempty"`
	// certificate subject
	Subject string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
}

func (x *ChaincodeOwnerDeleted) Reset() {
	*x = ChaincodeOwnerDeleted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_owner_chaincode_owner_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaincodeOwnerDeleted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaincodeOwnerDeleted) ProtoMessage() {}

func (x *ChaincodeOwnerDeleted) ProtoReflect() protoreflect.Message {
	mi := &file_owner_chaincode_owner_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaincodeOwnerDeleted.ProtoReflect.Descriptor instead.
func (*ChaincodeOwnerDeleted) Descriptor() ([]byte, []int) {
	return file_owner_chaincode_owner_proto_rawDescGZIP(), []int{7}
}

func (x *ChaincodeOwnerDeleted) GetMspId() string {
	if x != nil {
		return x.MspId
	}
	return ""
}

func (x *ChaincodeOwnerDeleted) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

var File_owner_chaincode_owner_proto protoreflect.FileDescriptor

var file_owner_chaincode_owner_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x6d, 0x77, 0x69,
	0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x49, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x2e, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0xb6, 0x02, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x73, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12,
	0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x65,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x29,
	0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x6d, 0x73, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x4d, 0x73, 0x70, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x43, 0x65, 0x72,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x4f, 0x0a, 0x12,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x06, 0x6d, 0x73, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x05, 0x6d, 0x73, 0x70, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x70, 0x00, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x22, 0x4f, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x06, 0x6d, 0x73, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x05, 0x6d, 0x73, 0x70,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x70, 0x00, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x22, 0x4a,
	0x0a, 0x07, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x06, 0x6d, 0x73, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58,
	0x01, 0x52, 0x05, 0x6d, 0x73, 0x70, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58,
	0x01, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x9b, 0x01, 0x0a, 0x15, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x73, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x39, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x15, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x73, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x22, 0x48,
	0x0a, 0x15, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x73, 0x70, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x32, 0xc3, 0x06, 0x0a, 0x15, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x71, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x42, 0x79,
	0x54, 0x78, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x20, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x77,
	0x68, 0x6f, 0x61, 0x6d, 0x69, 0x12, 0x62, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x21, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x2e, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x22, 0x19,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x2f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x75, 0x0a, 0x08, 0x47, 0x65, 0x74,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x1a, 0x20, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6d,
	0x73, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d,
	0x12, 0x73, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x24, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22,
	0x11, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x78, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x54, 0x78, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22,
	0x1b, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x2f, 0x74, 0x78, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x3a, 0x01, 0x2a, 0x12,
	0x73, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x24,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x1a, 0x11,
	0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x3a, 0x01, 0x2a, 0x12, 0x78, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x20,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x2a, 0x24, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x2f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6d, 0x73, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x42, 0x2d,
	0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x37, 0x74,
	0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2f, 0x63, 0x63, 0x6b, 0x69, 0x74, 0x2f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_owner_chaincode_owner_proto_rawDescOnce sync.Once
	file_owner_chaincode_owner_proto_rawDescData = file_owner_chaincode_owner_proto_rawDesc
)

func file_owner_chaincode_owner_proto_rawDescGZIP() []byte {
	file_owner_chaincode_owner_proto_rawDescOnce.Do(func() {
		file_owner_chaincode_owner_proto_rawDescData = protoimpl.X.CompressGZIP(file_owner_chaincode_owner_proto_rawDescData)
	})
	return file_owner_chaincode_owner_proto_rawDescData
}

var file_owner_chaincode_owner_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_owner_chaincode_owner_proto_goTypes = []interface{}{
	(*ChaincodeOwners)(nil),       // 0: extensions.owner.ChaincodeOwners
	(*ChaincodeOwner)(nil),        // 1: extensions.owner.ChaincodeOwner
	(*CreateOwnerRequest)(nil),    // 2: extensions.owner.CreateOwnerRequest
	(*UpdateOwnerRequest)(nil),    // 3: extensions.owner.UpdateOwnerRequest
	(*OwnerId)(nil),               // 4: extensions.owner.OwnerId
	(*ChaincodeOwnerCreated)(nil), // 5: extensions.owner.ChaincodeOwnerCreated
	(*ChaincodeOwnerUpdated)(nil), // 6: extensions.owner.ChaincodeOwnerUpdated
	(*ChaincodeOwnerDeleted)(nil), // 7: extensions.owner.ChaincodeOwnerDeleted
	(*timestamppb.Timestamp)(nil), // 8: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),         // 9: google.protobuf.Empty
}
var file_owner_chaincode_owner_proto_depIdxs = []int32{
	1,  // 0: extensions.owner.ChaincodeOwners.items:type_name -> extensions.owner.ChaincodeOwner
	8,  // 1: extensions.owner.ChaincodeOwner.expires_at:type_name -> google.protobuf.Timestamp
	8,  // 2: extensions.owner.ChaincodeOwner.updated_at:type_name -> google.protobuf.Timestamp
	8,  // 3: extensions.owner.ChaincodeOwnerCreated.expires_at:type_name -> google.protobuf.Timestamp
	8,  // 4: extensions.owner.ChaincodeOwnerUpdated.expires_at:type_name -> google.protobuf.Timestamp
	9,  // 5: extensions.owner.ChaincodeOwnerService.GetOwnerByTxCreator:input_type -> google.protobuf.Empty
	9,  // 6: extensions.owner.ChaincodeOwnerService.ListOwners:input_type -> google.protobuf.Empty
	4,  // 7: extensions.owner.ChaincodeOwnerService.GetOwner:input_type -> extensions.owner.OwnerId
	2,  // 8: extensions.owner.ChaincodeOwnerService.CreateOwner:input_type -> extensions.owner.CreateOwnerRequest
	9,  // 9: extensions.owner.ChaincodeOwnerService.CreateOwnerTxCreator:input_type -> google.protobuf.Empty
	3,  // 10: extensions.owner.ChaincodeOwnerService.UpdateOwner:input_type -> extensions.owner.UpdateOwnerRequest
	4,  // 11: extensions.owner.ChaincodeOwnerService.DeleteOwner:input_type -> extensions.owner.OwnerId
	1,  // 12: extensions.owner.ChaincodeOwnerService.GetOwnerByTxCreator:output_type -> extensions.owner.ChaincodeOwner
	0,  // 13: extensions.owner.ChaincodeOwnerService.ListOwners:output_type -> extensions.owner.ChaincodeOwners
	1,  // 14: extensions.owner.ChaincodeOwnerService.GetOwner:output_type -> extensions.owner.ChaincodeOwner
	1,  // 15: extensions.owner.ChaincodeOwnerService.CreateOwner:output_type -> extensions.owner.ChaincodeOwner
	1,  // 16: extensions.owner.ChaincodeOwnerService.CreateOwnerTxCreator:output_type -> extensions.owner.ChaincodeOwner
	1,  // 17: extensions.owner.ChaincodeOwnerService.UpdateOwner:output_type -> extensions.owner.ChaincodeOwner
	1,  // 18: extensions.owner.ChaincodeOwnerService.DeleteOwner:output_type -> extensions.owner.ChaincodeOwner
	12, // [12:19] is the sub-list for method output_type
	5,  // [5:12] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_owner_chaincode_owner_proto_init() }
func file_owner_chaincode_owner_proto_init() {
	if File_owner_chaincode_owner_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_owner_chaincode_owner_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaincodeOwners); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_owner_chaincode_owner_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaincodeOwner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_owner_chaincode_owner_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOwnerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_owner_chaincode_owner_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOwnerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_owner_chaincode_owner_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OwnerId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_owner_chaincode_owner_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaincodeOwnerCreated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_owner_chaincode_owner_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaincodeOwnerUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_owner_chaincode_owner_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaincodeOwnerDeleted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_owner_chaincode_owner_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_owner_chaincode_owner_proto_goTypes,
		DependencyIndexes: file_owner_chaincode_owner_proto_depIdxs,
		MessageInfos:      file_owner_chaincode_owner_proto_msgTypes,
	}.Build()
	File_owner_chaincode_owner_proto = out.File
	file_owner_chaincode_owner_proto_rawDesc = nil
	file_owner_chaincode_owner_proto_goTypes = nil
	file_owner_chaincode_owner_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ChaincodeOwnerServiceClient is the client API for ChaincodeOwnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChaincodeOwnerServiceClient interface {
	// Checks tx creator is owner
	GetOwnerByTxCreator(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChaincodeOwner, error)
	// Get owners list
	ListOwners(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChaincodeOwners, error)
	// Get owner by msp_id and certificate subject
	GetOwner(ctx context.Context, in *OwnerId, opts ...grpc.CallOption) (*ChaincodeOwner, error)
	// Register new chaincode owner, method can be call by current owner or if no owner exists
	// If chaincode owner with same MspID, certificate subject and issuer exists - throws error
	CreateOwner(ctx context.Context, in *CreateOwnerRequest, opts ...grpc.CallOption) (*ChaincodeOwner, error)
	// Register tx creator as chaincode owner
	CreateOwnerTxCreator(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChaincodeOwner, error)
	//  Update chaincode owner. Msp id and certificate subject must be equal to current owner certificate
	UpdateOwner(ctx context.Context, in *UpdateOwnerRequest, opts ...grpc.CallOption) (*ChaincodeOwner, error)
	// Delete owner
	DeleteOwner(ctx context.Context, in *OwnerId, opts ...grpc.CallOption) (*ChaincodeOwner, error)
}

type chaincodeOwnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChaincodeOwnerServiceClient(cc grpc.ClientConnInterface) ChaincodeOwnerServiceClient {
	return &chaincodeOwnerServiceClient{cc}
}

func (c *chaincodeOwnerServiceClient) GetOwnerByTxCreator(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChaincodeOwner, error) {
	out := new(ChaincodeOwner)
	err := c.cc.Invoke(ctx, "/extensions.owner.ChaincodeOwnerService/GetOwnerByTxCreator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeOwnerServiceClient) ListOwners(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChaincodeOwners, error) {
	out := new(ChaincodeOwners)
	err := c.cc.Invoke(ctx, "/extensions.owner.ChaincodeOwnerService/ListOwners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeOwnerServiceClient) GetOwner(ctx context.Context, in *OwnerId, opts ...grpc.CallOption) (*ChaincodeOwner, error) {
	out := new(ChaincodeOwner)
	err := c.cc.Invoke(ctx, "/extensions.owner.ChaincodeOwnerService/GetOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeOwnerServiceClient) CreateOwner(ctx context.Context, in *CreateOwnerRequest, opts ...grpc.CallOption) (*ChaincodeOwner, error) {
	out := new(ChaincodeOwner)
	err := c.cc.Invoke(ctx, "/extensions.owner.ChaincodeOwnerService/CreateOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeOwnerServiceClient) CreateOwnerTxCreator(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChaincodeOwner, error) {
	out := new(ChaincodeOwner)
	err := c.cc.Invoke(ctx, "/extensions.owner.ChaincodeOwnerService/CreateOwnerTxCreator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeOwnerServiceClient) UpdateOwner(ctx context.Context, in *UpdateOwnerRequest, opts ...grpc.CallOption) (*ChaincodeOwner, error) {
	out := new(ChaincodeOwner)
	err := c.cc.Invoke(ctx, "/extensions.owner.ChaincodeOwnerService/UpdateOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeOwnerServiceClient) DeleteOwner(ctx context.Context, in *OwnerId, opts ...grpc.CallOption) (*ChaincodeOwner, error) {
	out := new(ChaincodeOwner)
	err := c.cc.Invoke(ctx, "/extensions.owner.ChaincodeOwnerService/DeleteOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChaincodeOwnerServiceServer is the server API for ChaincodeOwnerService service.
type ChaincodeOwnerServiceServer interface {
	// Checks tx creator is owner
	GetOwnerByTxCreator(context.Context, *emptypb.Empty) (*ChaincodeOwner, error)
	// Get owners list
	ListOwners(context.Context, *emptypb.Empty) (*ChaincodeOwners, error)
	// Get owner by msp_id and certificate subject
	GetOwner(context.Context, *OwnerId) (*ChaincodeOwner, error)
	// Register new chaincode owner, method can be call by current owner or if no owner exists
	// If chaincode owner with same MspID, certificate subject and issuer exists - throws error
	CreateOwner(context.Context, *CreateOwnerRequest) (*ChaincodeOwner, error)
	// Register tx creator as chaincode owner
	CreateOwnerTxCreator(context.Context, *emptypb.Empty) (*ChaincodeOwner, error)
	//  Update chaincode owner. Msp id and certificate subject must be equal to current owner certificate
	UpdateOwner(context.Context, *UpdateOwnerRequest) (*ChaincodeOwner, error)
	// Delete owner
	DeleteOwner(context.Context, *OwnerId) (*ChaincodeOwner, error)
}

// UnimplementedChaincodeOwnerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChaincodeOwnerServiceServer struct {
}

func (*UnimplementedChaincodeOwnerServiceServer) GetOwnerByTxCreator(context.Context, *emptypb.Empty) (*ChaincodeOwner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwnerByTxCreator not implemented")
}
func (*UnimplementedChaincodeOwnerServiceServer) ListOwners(context.Context, *emptypb.Empty) (*ChaincodeOwners, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOwners not implemented")
}
func (*UnimplementedChaincodeOwnerServiceServer) GetOwner(context.Context, *OwnerId) (*ChaincodeOwner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwner not implemented")
}
func (*UnimplementedChaincodeOwnerServiceServer) CreateOwner(context.Context, *CreateOwnerRequest) (*ChaincodeOwner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOwner not implemented")
}
func (*UnimplementedChaincodeOwnerServiceServer) CreateOwnerTxCreator(context.Context, *emptypb.Empty) (*ChaincodeOwner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOwnerTxCreator not implemented")
}
func (*UnimplementedChaincodeOwnerServiceServer) UpdateOwner(context.Context, *UpdateOwnerRequest) (*ChaincodeOwner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOwner not implemented")
}
func (*UnimplementedChaincodeOwnerServiceServer) DeleteOwner(context.Context, *OwnerId) (*ChaincodeOwner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOwner not implemented")
}

func RegisterChaincodeOwnerServiceServer(s *grpc.Server, srv ChaincodeOwnerServiceServer) {
	s.RegisterService(&_ChaincodeOwnerService_serviceDesc, srv)
}

func _ChaincodeOwnerService_GetOwnerByTxCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeOwnerServiceServer).GetOwnerByTxCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/extensions.owner.ChaincodeOwnerService/GetOwnerByTxCreator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeOwnerServiceServer).GetOwnerByTxCreator(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeOwnerService_ListOwners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeOwnerServiceServer).ListOwners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/extensions.owner.ChaincodeOwnerService/ListOwners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeOwnerServiceServer).ListOwners(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeOwnerService_GetOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeOwnerServiceServer).GetOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/extensions.owner.ChaincodeOwnerService/GetOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeOwnerServiceServer).GetOwner(ctx, req.(*OwnerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeOwnerService_CreateOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeOwnerServiceServer).CreateOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/extensions.owner.ChaincodeOwnerService/CreateOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeOwnerServiceServer).CreateOwner(ctx, req.(*CreateOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeOwnerService_CreateOwnerTxCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeOwnerServiceServer).CreateOwnerTxCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/extensions.owner.ChaincodeOwnerService/CreateOwnerTxCreator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeOwnerServiceServer).CreateOwnerTxCreator(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeOwnerService_UpdateOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeOwnerServiceServer).UpdateOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/extensions.owner.ChaincodeOwnerService/UpdateOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeOwnerServiceServer).UpdateOwner(ctx, req.(*UpdateOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeOwnerService_DeleteOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeOwnerServiceServer).DeleteOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/extensions.owner.ChaincodeOwnerService/DeleteOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeOwnerServiceServer).DeleteOwner(ctx, req.(*OwnerId))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChaincodeOwnerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "extensions.owner.ChaincodeOwnerService",
	HandlerType: (*ChaincodeOwnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOwnerByTxCreator",
			Handler:    _ChaincodeOwnerService_GetOwnerByTxCreator_Handler,
		},
		{
			MethodName: "ListOwners",
			Handler:    _ChaincodeOwnerService_ListOwners_Handler,
		},
		{
			MethodName: "GetOwner",
			Handler:    _ChaincodeOwnerService_GetOwner_Handler,
		},
		{
			MethodName: "CreateOwner",
			Handler:    _ChaincodeOwnerService_CreateOwner_Handler,
		},
		{
			MethodName: "CreateOwnerTxCreator",
			Handler:    _ChaincodeOwnerService_CreateOwnerTxCreator_Handler,
		},
		{
			MethodName: "UpdateOwner",
			Handler:    _ChaincodeOwnerService_UpdateOwner_Handler,
		},
		{
			MethodName: "DeleteOwner",
			Handler:    _ChaincodeOwnerService_DeleteOwner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "owner/chaincode_owner.proto",
}
