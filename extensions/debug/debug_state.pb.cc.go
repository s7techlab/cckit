// Code generated by protoc-gen-cc-gateway. DO NOT EDIT.
// source: debug/debug_state.proto

/*
Package debug contains
  *   chaincode interface definition
  *   chaincode gateway definition
  *   chaincode service to cckit router registration func
*/
package debug

import (
	context "context"

	cckit_gateway "github.com/s7techlab/cckit/gateway"
	cckit_ccservice "github.com/s7techlab/cckit/gateway/service"
	cckit_router "github.com/s7techlab/cckit/router"
	cckit_param "github.com/s7techlab/cckit/router/param"
	cckit_defparam "github.com/s7techlab/cckit/router/param/defparam"
)

// DebugStateServiceChaincode  method names
const (
	DebugStateServiceChaincode_Clean = "Clean"

	DebugStateServiceChaincode_ListKeys = "ListKeys"

	DebugStateServiceChaincode_GetState = "GetState"

	DebugStateServiceChaincode_PutState = "PutState"

	DebugStateServiceChaincode_DeleteState = "DeleteState"
)

// DebugStateServiceChaincodeResolver interface for service resolver
type DebugStateServiceChaincodeResolver interface {
	DebugStateServiceChaincode(ctx cckit_router.Context) (DebugStateServiceChaincode, error)
}

// DebugStateServiceChaincode chaincode methods interface
type DebugStateServiceChaincode interface {
	Clean(cckit_router.Context, *Prefixes) (*PrefixesMatchCount, error)

	ListKeys(cckit_router.Context, *Prefix) (*CompositeKeys, error)

	GetState(cckit_router.Context, *CompositeKey) (*Value, error)

	PutState(cckit_router.Context, *Value) (*Value, error)

	DeleteState(cckit_router.Context, *CompositeKey) (*Value, error)
}

// RegisterDebugStateServiceChaincode registers service methods as chaincode router handlers
func RegisterDebugStateServiceChaincode(r *cckit_router.Group, cc DebugStateServiceChaincode) error {

	r.Invoke(DebugStateServiceChaincode_Clean,
		func(ctx cckit_router.Context) (interface{}, error) {
			if v, ok := ctx.Param().(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return nil, cckit_param.PayloadValidationError(err)
				}
			}
			return cc.Clean(ctx, ctx.Param().(*Prefixes))
		},
		cckit_defparam.Proto(&Prefixes{}))

	r.Query(DebugStateServiceChaincode_ListKeys,
		func(ctx cckit_router.Context) (interface{}, error) {
			if v, ok := ctx.Param().(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return nil, cckit_param.PayloadValidationError(err)
				}
			}
			return cc.ListKeys(ctx, ctx.Param().(*Prefix))
		},
		cckit_defparam.Proto(&Prefix{}))

	r.Query(DebugStateServiceChaincode_GetState,
		func(ctx cckit_router.Context) (interface{}, error) {
			if v, ok := ctx.Param().(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return nil, cckit_param.PayloadValidationError(err)
				}
			}
			return cc.GetState(ctx, ctx.Param().(*CompositeKey))
		},
		cckit_defparam.Proto(&CompositeKey{}))

	r.Invoke(DebugStateServiceChaincode_PutState,
		func(ctx cckit_router.Context) (interface{}, error) {
			if v, ok := ctx.Param().(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return nil, cckit_param.PayloadValidationError(err)
				}
			}
			return cc.PutState(ctx, ctx.Param().(*Value))
		},
		cckit_defparam.Proto(&Value{}))

	r.Invoke(DebugStateServiceChaincode_DeleteState,
		func(ctx cckit_router.Context) (interface{}, error) {
			if v, ok := ctx.Param().(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return nil, cckit_param.PayloadValidationError(err)
				}
			}
			return cc.DeleteState(ctx, ctx.Param().(*CompositeKey))
		},
		cckit_defparam.Proto(&CompositeKey{}))

	return nil
}

// NewDebugStateServiceGateway creates gateway to access chaincode method via chaincode service
func NewDebugStateServiceGateway(ccService cckit_ccservice.Chaincode, channel, chaincode string, opts ...cckit_gateway.Opt) *DebugStateServiceGateway {
	return &DebugStateServiceGateway{Gateway: cckit_gateway.NewChaincode(ccService, channel, chaincode, opts...)}
}

// gateway implementation
// gateway can be used as kind of SDK, GRPC or REST server ( via grpc-gateway or clay )
type DebugStateServiceGateway struct {
	Gateway cckit_gateway.Chaincode
}

// ServiceDef returns service definition
func (c *DebugStateServiceGateway) ServiceDef() cckit_gateway.ServiceDef {
	return cckit_gateway.ServiceDef{
		Desc:                        &_DebugStateService_serviceDesc,
		Service:                     c,
		HandlerFromEndpointRegister: RegisterDebugStateServiceHandlerFromEndpoint,
	}
}

// ApiDef deprecated, use ServiceDef
func (c *DebugStateServiceGateway) ApiDef() cckit_gateway.ServiceDef {
	return c.ServiceDef()
}

// Events returns events subscription
func (c *DebugStateServiceGateway) Events(ctx context.Context) (cckit_gateway.ChaincodeEventSub, error) {
	return c.Gateway.Events(ctx)
}

func (c *DebugStateServiceGateway) Clean(ctx context.Context, in *Prefixes) (*PrefixesMatchCount, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Gateway.Invoke(ctx, DebugStateServiceChaincode_Clean, []interface{}{in}, &PrefixesMatchCount{}); err != nil {
		return nil, err
	} else {
		return res.(*PrefixesMatchCount), nil
	}
}

func (c *DebugStateServiceGateway) ListKeys(ctx context.Context, in *Prefix) (*CompositeKeys, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Gateway.Query(ctx, DebugStateServiceChaincode_ListKeys, []interface{}{in}, &CompositeKeys{}); err != nil {
		return nil, err
	} else {
		return res.(*CompositeKeys), nil
	}
}

func (c *DebugStateServiceGateway) GetState(ctx context.Context, in *CompositeKey) (*Value, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Gateway.Query(ctx, DebugStateServiceChaincode_GetState, []interface{}{in}, &Value{}); err != nil {
		return nil, err
	} else {
		return res.(*Value), nil
	}
}

func (c *DebugStateServiceGateway) PutState(ctx context.Context, in *Value) (*Value, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Gateway.Invoke(ctx, DebugStateServiceChaincode_PutState, []interface{}{in}, &Value{}); err != nil {
		return nil, err
	} else {
		return res.(*Value), nil
	}
}

func (c *DebugStateServiceGateway) DeleteState(ctx context.Context, in *CompositeKey) (*Value, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Gateway.Invoke(ctx, DebugStateServiceChaincode_DeleteState, []interface{}{in}, &Value{}); err != nil {
		return nil, err
	} else {
		return res.(*Value), nil
	}
}
