// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: debug/debug_state.proto

package debug

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// State key prefix
type Prefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parts of key
	Key []string `protobuf:"bytes,1,rep,name=key,proto3" json:"key,omitempty"`
}

func (x *Prefix) Reset() {
	*x = Prefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_debug_state_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prefix) ProtoMessage() {}

func (x *Prefix) ProtoReflect() protoreflect.Message {
	mi := &file_debug_debug_state_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prefix.ProtoReflect.Descriptor instead.
func (*Prefix) Descriptor() ([]byte, []int) {
	return file_debug_debug_state_proto_rawDescGZIP(), []int{0}
}

func (x *Prefix) GetKey() []string {
	if x != nil {
		return x.Key
	}
	return nil
}

type Prefixes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefixes []*Prefix `protobuf:"bytes,1,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
}

func (x *Prefixes) Reset() {
	*x = Prefixes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_debug_state_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prefixes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prefixes) ProtoMessage() {}

func (x *Prefixes) ProtoReflect() protoreflect.Message {
	mi := &file_debug_debug_state_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prefixes.ProtoReflect.Descriptor instead.
func (*Prefixes) Descriptor() ([]byte, []int) {
	return file_debug_debug_state_proto_rawDescGZIP(), []int{1}
}

func (x *Prefixes) GetPrefixes() []*Prefix {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

// State key prefix match count
type PrefixesMatchCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matches map[string]uint32 `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *PrefixesMatchCount) Reset() {
	*x = PrefixesMatchCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_debug_state_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrefixesMatchCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrefixesMatchCount) ProtoMessage() {}

func (x *PrefixesMatchCount) ProtoReflect() protoreflect.Message {
	mi := &file_debug_debug_state_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrefixesMatchCount.ProtoReflect.Descriptor instead.
func (*PrefixesMatchCount) Descriptor() ([]byte, []int) {
	return file_debug_debug_state_proto_rawDescGZIP(), []int{2}
}

func (x *PrefixesMatchCount) GetMatches() map[string]uint32 {
	if x != nil {
		return x.Matches
	}
	return nil
}

// State keys
type CompositeKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*CompositeKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *CompositeKeys) Reset() {
	*x = CompositeKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_debug_state_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompositeKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompositeKeys) ProtoMessage() {}

func (x *CompositeKeys) ProtoReflect() protoreflect.Message {
	mi := &file_debug_debug_state_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompositeKeys.ProtoReflect.Descriptor instead.
func (*CompositeKeys) Descriptor() ([]byte, []int) {
	return file_debug_debug_state_proto_rawDescGZIP(), []int{3}
}

func (x *CompositeKeys) GetKeys() []*CompositeKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

// State key
type CompositeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key []string `protobuf:"bytes,1,rep,name=key,proto3" json:"key,omitempty"`
}

func (x *CompositeKey) Reset() {
	*x = CompositeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_debug_state_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompositeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompositeKey) ProtoMessage() {}

func (x *CompositeKey) ProtoReflect() protoreflect.Message {
	mi := &file_debug_debug_state_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompositeKey.ProtoReflect.Descriptor instead.
func (*CompositeKey) Descriptor() ([]byte, []int) {
	return file_debug_debug_state_proto_rawDescGZIP(), []int{4}
}

func (x *CompositeKey) GetKey() []string {
	if x != nil {
		return x.Key
	}
	return nil
}

// State value
type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   []string `protobuf:"bytes,1,rep,name=key,proto3" json:"key,omitempty"`
	Value []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Json  string   `protobuf:"bytes,3,opt,name=json,proto3" json:"json,omitempty"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_debug_state_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_debug_debug_state_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_debug_debug_state_proto_rawDescGZIP(), []int{5}
}

func (x *Value) GetKey() []string {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Value) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Value) GetJson() string {
	if x != nil {
		return x.Json
	}
	return ""
}

var File_debug_debug_state_proto protoreflect.FileDescriptor

var file_debug_debug_state_proto_rawDesc = []byte{
	0x0a, 0x17, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1a, 0x0a, 0x06, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x40, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x73, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x08, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4b,
	0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x43, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x20, 0x0a, 0x0c,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x43,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6a,
	0x73, 0x6f, 0x6e, 0x32, 0x81, 0x04, 0x0a, 0x11, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x68, 0x0a, 0x05, 0x43, 0x6c, 0x65,
	0x61, 0x6e, 0x12, 0x1a, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x1a, 0x24,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x1a, 0x12, 0x2f, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6c, 0x65, 0x61, 0x6e,
	0x3a, 0x01, 0x2a, 0x12, 0x66, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x18, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x1a, 0x1f, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x19, 0x12, 0x17, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x7b, 0x6b, 0x65, 0x79, 0x7d, 0x12, 0x5f, 0x0a, 0x08, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x1a, 0x17, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x7b, 0x6b, 0x65, 0x79, 0x7d, 0x12, 0x55, 0x0a, 0x08,
	0x50, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x17, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x11, 0x1a, 0x0c, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x3a, 0x01, 0x2a, 0x12, 0x62, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1e, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x1a, 0x17, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x14, 0x2a, 0x12, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x7b, 0x6b, 0x65, 0x79, 0x7d, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x37, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2f,
	0x63, 0x63, 0x6b, 0x69, 0x74, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_debug_debug_state_proto_rawDescOnce sync.Once
	file_debug_debug_state_proto_rawDescData = file_debug_debug_state_proto_rawDesc
)

func file_debug_debug_state_proto_rawDescGZIP() []byte {
	file_debug_debug_state_proto_rawDescOnce.Do(func() {
		file_debug_debug_state_proto_rawDescData = protoimpl.X.CompressGZIP(file_debug_debug_state_proto_rawDescData)
	})
	return file_debug_debug_state_proto_rawDescData
}

var file_debug_debug_state_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_debug_debug_state_proto_goTypes = []interface{}{
	(*Prefix)(nil),             // 0: extensions.debug.Prefix
	(*Prefixes)(nil),           // 1: extensions.debug.Prefixes
	(*PrefixesMatchCount)(nil), // 2: extensions.debug.PrefixesMatchCount
	(*CompositeKeys)(nil),      // 3: extensions.debug.CompositeKeys
	(*CompositeKey)(nil),       // 4: extensions.debug.CompositeKey
	(*Value)(nil),              // 5: extensions.debug.Value
	nil,                        // 6: extensions.debug.PrefixesMatchCount.MatchesEntry
}
var file_debug_debug_state_proto_depIdxs = []int32{
	0, // 0: extensions.debug.Prefixes.prefixes:type_name -> extensions.debug.Prefix
	6, // 1: extensions.debug.PrefixesMatchCount.matches:type_name -> extensions.debug.PrefixesMatchCount.MatchesEntry
	4, // 2: extensions.debug.CompositeKeys.keys:type_name -> extensions.debug.CompositeKey
	1, // 3: extensions.debug.DebugStateService.Clean:input_type -> extensions.debug.Prefixes
	0, // 4: extensions.debug.DebugStateService.ListKeys:input_type -> extensions.debug.Prefix
	4, // 5: extensions.debug.DebugStateService.GetState:input_type -> extensions.debug.CompositeKey
	5, // 6: extensions.debug.DebugStateService.PutState:input_type -> extensions.debug.Value
	4, // 7: extensions.debug.DebugStateService.DeleteState:input_type -> extensions.debug.CompositeKey
	2, // 8: extensions.debug.DebugStateService.Clean:output_type -> extensions.debug.PrefixesMatchCount
	3, // 9: extensions.debug.DebugStateService.ListKeys:output_type -> extensions.debug.CompositeKeys
	5, // 10: extensions.debug.DebugStateService.GetState:output_type -> extensions.debug.Value
	5, // 11: extensions.debug.DebugStateService.PutState:output_type -> extensions.debug.Value
	5, // 12: extensions.debug.DebugStateService.DeleteState:output_type -> extensions.debug.Value
	8, // [8:13] is the sub-list for method output_type
	3, // [3:8] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_debug_debug_state_proto_init() }
func file_debug_debug_state_proto_init() {
	if File_debug_debug_state_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_debug_debug_state_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Prefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_debug_state_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Prefixes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_debug_state_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrefixesMatchCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_debug_state_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompositeKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_debug_state_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompositeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_debug_state_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_debug_debug_state_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_debug_debug_state_proto_goTypes,
		DependencyIndexes: file_debug_debug_state_proto_depIdxs,
		MessageInfos:      file_debug_debug_state_proto_msgTypes,
	}.Build()
	File_debug_debug_state_proto = out.File
	file_debug_debug_state_proto_rawDesc = nil
	file_debug_debug_state_proto_goTypes = nil
	file_debug_debug_state_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DebugStateServiceClient is the client API for DebugStateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DebugStateServiceClient interface {
	// Clear all state or, if prefixes are defined, only prefix matched
	Clean(ctx context.Context, in *Prefixes, opts ...grpc.CallOption) (*PrefixesMatchCount, error)
	// Get keys list, returns all keys or, if prefixes are defined, only prefix matched
	ListKeys(ctx context.Context, in *Prefix, opts ...grpc.CallOption) (*CompositeKeys, error)
	// Get state value by key
	GetState(ctx context.Context, in *CompositeKey, opts ...grpc.CallOption) (*Value, error)
	// Put state value
	PutState(ctx context.Context, in *Value, opts ...grpc.CallOption) (*Value, error)
	// Delete state value
	DeleteState(ctx context.Context, in *CompositeKey, opts ...grpc.CallOption) (*Value, error)
}

type debugStateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDebugStateServiceClient(cc grpc.ClientConnInterface) DebugStateServiceClient {
	return &debugStateServiceClient{cc}
}

func (c *debugStateServiceClient) Clean(ctx context.Context, in *Prefixes, opts ...grpc.CallOption) (*PrefixesMatchCount, error) {
	out := new(PrefixesMatchCount)
	err := c.cc.Invoke(ctx, "/extensions.debug.DebugStateService/Clean", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugStateServiceClient) ListKeys(ctx context.Context, in *Prefix, opts ...grpc.CallOption) (*CompositeKeys, error) {
	out := new(CompositeKeys)
	err := c.cc.Invoke(ctx, "/extensions.debug.DebugStateService/ListKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugStateServiceClient) GetState(ctx context.Context, in *CompositeKey, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, "/extensions.debug.DebugStateService/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugStateServiceClient) PutState(ctx context.Context, in *Value, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, "/extensions.debug.DebugStateService/PutState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugStateServiceClient) DeleteState(ctx context.Context, in *CompositeKey, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, "/extensions.debug.DebugStateService/DeleteState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DebugStateServiceServer is the server API for DebugStateService service.
type DebugStateServiceServer interface {
	// Clear all state or, if prefixes are defined, only prefix matched
	Clean(context.Context, *Prefixes) (*PrefixesMatchCount, error)
	// Get keys list, returns all keys or, if prefixes are defined, only prefix matched
	ListKeys(context.Context, *Prefix) (*CompositeKeys, error)
	// Get state value by key
	GetState(context.Context, *CompositeKey) (*Value, error)
	// Put state value
	PutState(context.Context, *Value) (*Value, error)
	// Delete state value
	DeleteState(context.Context, *CompositeKey) (*Value, error)
}

// UnimplementedDebugStateServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDebugStateServiceServer struct {
}

func (*UnimplementedDebugStateServiceServer) Clean(context.Context, *Prefixes) (*PrefixesMatchCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clean not implemented")
}
func (*UnimplementedDebugStateServiceServer) ListKeys(context.Context, *Prefix) (*CompositeKeys, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeys not implemented")
}
func (*UnimplementedDebugStateServiceServer) GetState(context.Context, *CompositeKey) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (*UnimplementedDebugStateServiceServer) PutState(context.Context, *Value) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutState not implemented")
}
func (*UnimplementedDebugStateServiceServer) DeleteState(context.Context, *CompositeKey) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteState not implemented")
}

func RegisterDebugStateServiceServer(s *grpc.Server, srv DebugStateServiceServer) {
	s.RegisterService(&_DebugStateService_serviceDesc, srv)
}

func _DebugStateService_Clean_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Prefixes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugStateServiceServer).Clean(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/extensions.debug.DebugStateService/Clean",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugStateServiceServer).Clean(ctx, req.(*Prefixes))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugStateService_ListKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Prefix)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugStateServiceServer).ListKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/extensions.debug.DebugStateService/ListKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugStateServiceServer).ListKeys(ctx, req.(*Prefix))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugStateService_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompositeKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugStateServiceServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/extensions.debug.DebugStateService/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugStateServiceServer).GetState(ctx, req.(*CompositeKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugStateService_PutState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugStateServiceServer).PutState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/extensions.debug.DebugStateService/PutState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugStateServiceServer).PutState(ctx, req.(*Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugStateService_DeleteState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompositeKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugStateServiceServer).DeleteState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/extensions.debug.DebugStateService/DeleteState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugStateServiceServer).DeleteState(ctx, req.(*CompositeKey))
	}
	return interceptor(ctx, in, info, handler)
}

var _DebugStateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "extensions.debug.DebugStateService",
	HandlerType: (*DebugStateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Clean",
			Handler:    _DebugStateService_Clean_Handler,
		},
		{
			MethodName: "ListKeys",
			Handler:    _DebugStateService_ListKeys_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _DebugStateService_GetState_Handler,
		},
		{
			MethodName: "PutState",
			Handler:    _DebugStateService_PutState_Handler,
		},
		{
			MethodName: "DeleteState",
			Handler:    _DebugStateService_DeleteState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "debug/debug_state.proto",
}
