// Code generated by protoc-gen-cc-gateway. DO NOT EDIT.
// source: pinger/chaincode_pinger.proto

/*
Package pinger contains
  *   chaincode methods names {service_name}Chaincode_{method_name}
  *   chaincode interface definition {service_name}Chaincode
  *   chaincode gateway definition {service_name}}Gateway
  *   chaincode service to cckit router registration func
*/
package pinger

import (
	context "context"
	_ "embed"

	cckit_gateway "github.com/s7techlab/cckit/gateway"
	cckit_router "github.com/s7techlab/cckit/router"
	cckit_defparam "github.com/s7techlab/cckit/router/param/defparam"
	cckit_sdk "github.com/s7techlab/cckit/sdk"
	"google.golang.org/protobuf/types/known/emptypb"
)

// ChaincodePingerServiceChaincode method names
const (

	// ChaincodePingerServiceChaincodeMethodPrefix allows to use multiple services with same method names in one chaincode
	ChaincodePingerServiceChaincodeMethodPrefix = "ChaincodePingerService."

	ChaincodePingerServiceChaincode_Ping = ChaincodePingerServiceChaincodeMethodPrefix + "Ping"
)

// ChaincodePingerServiceChaincode chaincode methods interface
type ChaincodePingerServiceChaincode interface {
	Ping(cckit_router.Context, *emptypb.Empty) (*PingInfo, error)
}

// RegisterChaincodePingerServiceChaincode registers service methods as chaincode router handlers
func RegisterChaincodePingerServiceChaincode(r *cckit_router.Group, cc ChaincodePingerServiceChaincode) error {

	r.Invoke(ChaincodePingerServiceChaincode_Ping,
		func(ctx cckit_router.Context) (interface{}, error) {
			return cc.Ping(ctx, ctx.Param().(*emptypb.Empty))
		},
		cckit_defparam.Proto(&emptypb.Empty{}))

	return nil
}

//go:embed chaincode_pinger.swagger.json
var ChaincodePingerServiceSwagger []byte

// NewChaincodePingerServiceGateway creates gateway to access chaincode method via chaincode service
func NewChaincodePingerServiceGateway(sdk cckit_sdk.SDK, channel, chaincode string, opts ...cckit_gateway.Opt) *ChaincodePingerServiceGateway {
	return NewChaincodePingerServiceGatewayFromInstance(
		cckit_gateway.NewChaincodeInstanceService(
			sdk,
			&cckit_gateway.ChaincodeLocator{Channel: channel, Chaincode: chaincode},
			opts...,
		))
}

func NewChaincodePingerServiceGatewayFromInstance(chaincodeInstance cckit_gateway.ChaincodeInstance) *ChaincodePingerServiceGateway {
	return &ChaincodePingerServiceGateway{
		ChaincodeInstance: chaincodeInstance,
	}
}

// gateway implementation
// gateway can be used as kind of SDK, GRPC or REST server ( via grpc-gateway or clay )
type ChaincodePingerServiceGateway struct {
	ChaincodeInstance cckit_gateway.ChaincodeInstance
}

func (c *ChaincodePingerServiceGateway) Invoker() cckit_gateway.ChaincodeInstanceInvoker {
	return cckit_gateway.NewChaincodeInstanceServiceInvoker(c.ChaincodeInstance)
}

// ServiceDef returns service definition
func (c *ChaincodePingerServiceGateway) ServiceDef() cckit_gateway.ServiceDef {
	return cckit_gateway.NewServiceDef(
		_ChaincodePingerService_serviceDesc.ServiceName,
		ChaincodePingerServiceSwagger,
		&_ChaincodePingerService_serviceDesc,
		c,
		RegisterChaincodePingerServiceHandlerFromEndpoint,
	)
}

func (c *ChaincodePingerServiceGateway) Ping(ctx context.Context, in *emptypb.Empty) (*PingInfo, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker().Invoke(ctx, ChaincodePingerServiceChaincode_Ping, []interface{}{in}, &PingInfo{}); err != nil {
		return nil, err
	} else {
		return res.(*PingInfo), nil
	}
}
